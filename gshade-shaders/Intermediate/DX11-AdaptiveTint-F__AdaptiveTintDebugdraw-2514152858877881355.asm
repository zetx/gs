//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iUIInfo;                       // Offset:    0 Size:     4 [unused]
//   int iUIWhiteLevelFormula;          // Offset:    4 Size:     4
//   float3 f3UICurveWhiteParam;        // Offset:   16 Size:    12
//   int iUIBlackLevelFormula;          // Offset:   28 Size:     4
//   float3 f3UICurveBlackParam;        // Offset:   32 Size:    12
//   float fUIColorTempScaling;         // Offset:   44 Size:     4
//   float fUISaturation;               // Offset:   48 Size:     4 [unused]
//   float3 fUITintWarm;                // Offset:   52 Size:    12 [unused]
//   float3 fUITintCold;                // Offset:   64 Size:    12 [unused]
//   int iUIDebug;                      // Offset:   76 Size:     4 [unused]
//   float fUIStrength;                 // Offset:   80 Size:     4 [unused]
//   int2 AdaptiveTintDebugPosition;    // Offset:   84 Size:     8 [unused]
//   float AdaptiveTintDebugOpacity;    // Offset:   92 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__Stats__shared_texStats       texture  float4          2d             t4      1 
// __V__Stats__shared_texStatsAvgColor    texture  float4          2d             t6      1 
// __V__Stats__shared_texStatsAvgLuma    texture  float4          2d             t8      1 
// __V__Stats__shared_texStatsAvgColorTemp    texture  float4          2d            t10      1 
// __V__texAdaptiveTintDebug         texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 11
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t4.xyzw, s0
dp3 r0.x, r0.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
ld_indexable(texture2d)(float,float,float,float) r0.y, l(0, 0, 0, 0), t8.yxzw
add r0.z, r0.y, -cb0[2].y
mul r0.w, r0.z, r0.z
mul r0.w, r0.w, r0.z
mad r0.w, cb0[2].x, r0.w, cb0[2].z
mul r1.x, r0.z, cb0[2].x
mad r0.z, r0.z, cb0[2].x, cb0[2].z
mad r1.x, r1.x, l(2.000000), cb0[2].z
ieq r1.yz, cb0[1].wwww, l(0, 2, 1, 0)
movc r0.z, r1.z, r1.x, r0.z
movc_sat r0.z, r1.y, r0.w, r0.z
max r0.x, r0.z, r0.x
add r0.w, r0.y, -cb0[1].y
mul r1.x, r0.w, r0.w
mul r1.x, r0.w, r1.x
mad r1.x, cb0[1].x, r1.x, cb0[1].z
mul r1.w, r0.w, cb0[1].x
mad r0.w, r0.w, cb0[1].x, cb0[1].z
mad r1.w, r1.w, l(2.000000), cb0[1].z
ieq r2.xy, cb0[0].yyyy, l(2, 1, 0, 0)
movc r0.w, r2.y, r1.w, r0.w
movc_sat r0.w, r2.x, r1.x, r0.w
min r0.x, r0.w, r0.x
max r0.x, r0.z, r0.x
min r0.x, r0.w, r0.x
add r0.w, -r0.z, r0.w
add r0.x, -r0.z, r0.x
lt r0.z, |r0.w|, l(0.000001)
movc r0.z, r0.z, l(0.000001), r0.w
div_sat r0.x, r0.x, r0.z
ld_indexable(texture2d)(float,float,float,float) r0.z, l(0, 0, 0, 0), t10.yzxw
mul r0.z, r0.z, cb0[2].w
max r0.z, r0.z, l(-0.595700)
min r0.z, r0.z, l(0.595700)
add r0.z, r0.z, l(0.595700)
resinfo_indexable(texture2d)(float,float,float,float)_uint r1.xw, l(0), t12.xzwy
imin r3.xyzw, r1.xwxw, l(10, 350, 850, 10)
iadd r4.xyzw, r1.xwxw, -r3.xyzw
itof r5.xyzw, r1.xwxw
imin r4.xyzw, r4.xyzw, l(0, 10, 10, 0)
itof r6.xyzw, r4.yxwz
itof r7.xyzw, r3.xyzw
div r6.xyzw, r6.xyzw, r7.yxwz
div r7.xyzw, r7.xyzw, r5.xyzw
mad r0.zw, r0.zzzz, l(0.000000, 0.000000, 0.839349, 0.839349), r6.xxxy
mad r0.w, -r0.w, r7.x, v1.x
mov r0.w, |r0.w|
deriv_rtx_coarse r8.x, r0.w
deriv_rty_coarse r8.y, r0.w
dp2 r1.x, r8.xyxx, r8.xyxx
sqrt r1.x, r1.x
add r1.w, r1.x, l(0.002000)
add r1.x, -r1.x, l(0.002000)
add r1.w, -r1.x, r1.w
add r0.w, r0.w, -r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r0.w, r0.w, r1.x
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
div r1.xw, v1.xxxx, r7.xxxz
add r1.xw, -r6.yyyw, r1.xxxw
mad r8.xyz, r1.xxxx, l(-1.000000, 0.000000, 1.000000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
add r9.xyz, r1.wwww, l(-1.000000, -0.000000, -1.000000, 0.000000)
mul r8.xyz, r0.wwww, r8.xyzx
add r0.w, -v1.y, l(1.000000)
mad r0.z, -r0.z, r7.y, r0.w
mov r0.z, |r0.z|
deriv_rtx_coarse r10.x, r0.z
deriv_rty_coarse r10.y, r0.z
dp2 r1.x, r10.xyxx, r10.xyxx
sqrt r1.x, r1.x
add r1.w, r1.x, l(0.002000)
add r1.x, -r1.x, l(0.002000)
add r1.w, -r1.x, r1.w
add r0.z, r0.z, -r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r0.z, r0.z, r1.x
mad r1.x, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r1.x
div r1.xw, r0.wwww, r7.yyyw
add r1.xw, -r6.xxxz, r1.xxxw
add r2.zw, r0.yyyy, r6.zzzw
mad r6.xyz, r1.xxxx, l(-1.000000, 0.000000, 1.000000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
add r10.xyz, r1.wwww, l(-1.000000, -0.000000, -1.000000, 0.000000)
mul r6.xyz, r0.zzzz, r6.xyzx
ige r0.yz, r3.yywy, r3.xxzx
iadd r3.xyzw, r3.xyzw, r4.xyzw
movc r6.xyz, r0.yyyy, r6.xyzx, r8.xyzx
mad r8.xyzw, v1.xyxy, l(1.000000, -1.000000, 1.000000, -1.000000), l(0.000000, 1.000000, 0.000000, 1.000000)
mul r5.xyzw, r5.xyzw, r8.xyzw
ftoi r5.xyzw, r5.xyzw
ige r4.xyzw, r5.zwzw, r4.xyzw
ige r3.xyzw, r3.xyzw, r5.xyzw
and r5.xyz, r3.xzxx, r4.xzxx
and r3.xyz, r3.ywwy, r5.xyzx
and r3.xyz, r4.ywwy, r3.xyzx
movc r4.xyz, r3.xxxx, r6.xyzx, r0.xxxx
mad r0.x, -r2.z, r7.w, r0.w
mad r0.y, -r2.w, r7.z, v1.x
mov r0.xy, |r0.xyxx|
deriv_rtx_coarse r5.x, r0.x
deriv_rty_coarse r5.y, r0.x
dp2 r1.x, r5.xyxx, r5.xyxx
sqrt r1.x, r1.x
add r1.w, r1.x, l(0.002000)
add r1.x, -r1.x, l(0.002000)
add r1.w, -r1.x, r1.w
add r0.x, r0.x, -r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r0.x, r0.x, r1.x
mad r1.x, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r1.x
mad r5.xyz, r0.xxxx, r10.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)
deriv_rtx_coarse r6.x, r0.y
deriv_rty_coarse r6.y, r0.y
dp2 r0.x, r6.xyxx, r6.xyxx
sqrt r0.x, r0.x
add r1.x, -r0.x, l(0.002000)
add r0.x, r0.x, l(0.002000)
add r0.xy, r0.xyxx, -r1.xxxx
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul_sat r0.x, r0.x, r0.y
mad r0.y, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.y
mad r6.xyz, r0.xxxx, r9.xyzx, l(1.000000, 0.000000, 1.000000, 0.000000)
movc r0.xyz, r0.zzzz, r5.xyzx, r6.xyzx
movc r0.xyz, r3.yyyy, r0.xyzx, r4.xyzx
ld_indexable(texture2d)(float,float,float,float) r3.xyw, l(0, 0, 0, 0), t6.xywz
movc r0.xyz, r3.zzzz, r3.xywx, r0.xyzx
add r0.xyz, r0.xyzx, l(-1.000000, -0.000000, -0.000000, 0.000000)
add r1.x, v1.x, -cb0[2].y
mul r1.w, r1.x, cb0[2].x
mad r1.w, r1.w, l(2.000000), cb0[2].z
mad r2.z, r1.x, cb0[2].x, cb0[2].z
movc r1.z, r1.z, r1.w, r2.z
mul r1.w, r1.x, r1.x
mul r1.x, r1.w, r1.x
mad r1.x, cb0[2].x, r1.x, cb0[2].z
movc_sat r1.w, r1.y, r1.x, r1.z
add r1.x, v1.x, -cb0[1].y
mul r1.y, r1.x, cb0[1].x
mad r1.y, r1.y, l(2.000000), cb0[1].z
mad r2.z, r1.x, cb0[1].x, cb0[1].z
movc r1.y, r2.y, r1.y, r2.z
mul r2.y, r1.x, r1.x
mul r1.x, r1.x, r2.y
mad r1.x, cb0[1].x, r1.x, cb0[1].z
movc_sat r1.z, r2.x, r1.x, r1.y
add r1.xy, r0.wwww, -r1.zwzz
mov r1.xy, |r1.xyxx|
deriv_rtx_coarse r2.xy, r1.xyxx
deriv_rty_coarse r2.zw, r1.xxxy
dp2 r0.w, r2.xzxx, r2.xzxx
dp2 r1.z, r2.ywyy, r2.ywyy
sqrt r1.z, r1.z
sqrt r0.w, r0.w
add r1.w, r0.w, l(0.002000)
add r0.w, -r0.w, l(0.002000)
add r1.w, -r0.w, r1.w
add r0.w, -r0.w, r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r0.w, r0.w, r1.x
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
mad r0.xyz, r0.wwww, r0.xyzx, l(1.000000, -1.000000, -1.000000, 0.000000)
add r0.w, r1.z, l(0.002000)
add r1.x, -r1.z, l(0.002000)
add r0.w, r0.w, -r1.x
add r1.x, -r1.x, r1.y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul_sat r0.w, r0.w, r1.x
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
mad o0.xyz, r0.wwww, r0.xyzx, l(0.000000, 1.000000, 1.000000, 0.000000)
ret 
// Approximately 183 instruction slots used
