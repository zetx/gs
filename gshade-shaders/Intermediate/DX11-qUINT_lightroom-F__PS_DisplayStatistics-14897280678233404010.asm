//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool LIGHTROOM_ENABLE_LUT;         // Offset:    0 Size:     4 [unused]
//   int LIGHTROOM_LUT_TILE_SIZE;       // Offset:    4 Size:     4 [unused]
//   int LIGHTROOM_LUT_TILE_COUNT;      // Offset:    8 Size:     4 [unused]
//   int LIGHTROOM_LUT_SCROLL;          // Offset:   12 Size:     4 [unused]
//   bool LIGHTROOM_ENABLE_CURVE_DISPLAY;// Offset:   16 Size:     4
//   bool LIGHTROOM_ENABLE_CLIPPING_DISPLAY;// Offset:   20 Size:     4
//   float LIGHTROOM_RED_HUESHIFT;      // Offset:   24 Size:     4 [unused]
//   float LIGHTROOM_ORANGE_HUESHIFT;   // Offset:   28 Size:     4 [unused]
//   float LIGHTROOM_YELLOW_HUESHIFT;   // Offset:   32 Size:     4 [unused]
//   float LIGHTROOM_GREEN_HUESHIFT;    // Offset:   36 Size:     4 [unused]
//   float LIGHTROOM_AQUA_HUESHIFT;     // Offset:   40 Size:     4 [unused]
//   float LIGHTROOM_BLUE_HUESHIFT;     // Offset:   44 Size:     4 [unused]
//   float LIGHTROOM_MAGENTA_HUESHIFT;  // Offset:   48 Size:     4 [unused]
//   float LIGHTROOM_RED_EXPOSURE;      // Offset:   52 Size:     4 [unused]
//   float LIGHTROOM_ORANGE_EXPOSURE;   // Offset:   56 Size:     4 [unused]
//   float LIGHTROOM_YELLOW_EXPOSURE;   // Offset:   60 Size:     4 [unused]
//   float LIGHTROOM_GREEN_EXPOSURE;    // Offset:   64 Size:     4 [unused]
//   float LIGHTROOM_AQUA_EXPOSURE;     // Offset:   68 Size:     4 [unused]
//   float LIGHTROOM_BLUE_EXPOSURE;     // Offset:   72 Size:     4 [unused]
//   float LIGHTROOM_MAGENTA_EXPOSURE;  // Offset:   76 Size:     4 [unused]
//   float LIGHTROOM_RED_SATURATION;    // Offset:   80 Size:     4 [unused]
//   float LIGHTROOM_ORANGE_SATURATION; // Offset:   84 Size:     4 [unused]
//   float LIGHTROOM_YELLOW_SATURATION; // Offset:   88 Size:     4 [unused]
//   float LIGHTROOM_GREEN_SATURATION;  // Offset:   92 Size:     4 [unused]
//   float LIGHTROOM_AQUA_SATURATION;   // Offset:   96 Size:     4 [unused]
//   float LIGHTROOM_BLUE_SATURATION;   // Offset:  100 Size:     4 [unused]
//   float LIGHTROOM_MAGENTA_SATURATION;// Offset:  104 Size:     4 [unused]
//   float LIGHTROOM_GLOBAL_BLACK_LEVEL;// Offset:  108 Size:     4
//   float LIGHTROOM_GLOBAL_WHITE_LEVEL;// Offset:  112 Size:     4
//   float LIGHTROOM_GLOBAL_EXPOSURE;   // Offset:  116 Size:     4
//   float LIGHTROOM_GLOBAL_GAMMA;      // Offset:  120 Size:     4
//   float LIGHTROOM_GLOBAL_BLACKS_CURVE;// Offset:  124 Size:     4
//   float LIGHTROOM_GLOBAL_SHADOWS_CURVE;// Offset:  128 Size:     4
//   float LIGHTROOM_GLOBAL_MIDTONES_CURVE;// Offset:  132 Size:     4
//   float LIGHTROOM_GLOBAL_HIGHLIGHTS_CURVE;// Offset:  136 Size:     4
//   float LIGHTROOM_GLOBAL_WHITES_CURVE;// Offset:  140 Size:     4
//   float LIGHTROOM_GLOBAL_CONTRAST;   // Offset:  144 Size:     4
//   float LIGHTROOM_GLOBAL_SATURATION; // Offset:  148 Size:     4 [unused]
//   float LIGHTROOM_GLOBAL_VIBRANCE;   // Offset:  152 Size:     4 [unused]
//   float LIGHTROOM_GLOBAL_TEMPERATURE;// Offset:  156 Size:     4 [unused]
//   float LIGHTROOM_GLOBAL_TINT;       // Offset:  160 Size:     4 [unused]
//   bool LIGHTROOM_ENABLE_VIGNETTE;    // Offset:  164 Size:     4
//   bool LIGHTROOM_VIGNETTE_SHOW_RADII;// Offset:  168 Size:     4
//   float LIGHTROOM_VIGNETTE_RADIUS_INNER;// Offset:  172 Size:     4
//   float LIGHTROOM_VIGNETTE_RADIUS_OUTER;// Offset:  176 Size:     4
//   float LIGHTROOM_VIGNETTE_WIDTH;    // Offset:  180 Size:     4
//   float LIGHTROOM_VIGNETTE_HEIGHT;   // Offset:  184 Size:     4
//   float LIGHTROOM_VIGNETTE_AMOUNT;   // Offset:  188 Size:     4
//   float LIGHTROOM_VIGNETTE_CURVE;    // Offset:  192 Size:     4
//   int LIGHTROOM_VIGNETTE_BLEND_MODE; // Offset:  196 Size:     4
//   float FRAME_TIME;                  // Offset:  200 Size:     4 [unused]
//   int FRAME_COUNT;                   // Offset:  204 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__qUINT__BackBufferTex         texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   x           2     NONE   float       
// TEXCOORD                 2   x           3     NONE   float       
// TEXCOORD                 3   x           4     NONE   float       
// TEXCOORD                 4   x           5     NONE   float       
// TEXCOORD                 5   x           6     NONE   float       
// TEXCOORD                 6   x           7     NONE   float       
// TEXCOORD                 7   x           8     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
if_nz cb0[10].y
  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mad r1.xy, -r1.xyxx, cb0[11].yzyy, r1.xyxx
  dp2 r0.w, r1.xyxx, r1.xyxx
  sqrt r0.w, r0.w
  mov r1.x, cb0[10].w
  mov r1.z, cb0[11].x
  add r1.yzw, r0.wwww, -r1.xxxz
  add r0.w, -r1.x, cb0[11].x
  div_sat r0.w, r1.y, r0.w
  add r1.x, cb0[12].x, l(0.000001)
  log r0.w, r0.w
  mul r0.w, r0.w, r1.x
  exp r0.w, r0.w
  mul r1.x, r0.w, cb0[11].w
  mad_sat r1.y, -r0.w, cb0[11].w, l(1.000000)
  mul r2.xyz, r0.xyzx, r1.yyyy
  movc r2.xyz, cb0[12].yyyy, r0.xyzx, r2.xyzx
  ieq r3.xyz, cb0[12].yyyy, l(1, 2, 3, 0)
  mad_sat r4.xyz, -r0.wwww, cb0[11].wwww, r2.xyzx
  movc r2.xyz, r3.xxxx, r4.xyzx, r2.xyzx
  add r4.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r0.w, r0.w, cb0[11].w, l(1.000000)
  mad r4.xyz, -r4.xyzx, r0.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  movc r2.xyz, r3.yyyy, r4.xyzx, r2.xyzx
  mad r0.w, -r1.x, l(2.000000), l(1.000000)
  dp3 r1.x, r2.xyzx, l(0.333000, 0.333000, 0.333000, 0.000000)
  add r1.y, -r0.w, l(1.000000)
  mad_sat r0.w, r1.x, r1.y, r0.w
  mul r3.xyw, r0.wwww, r2.xyxz
  movc r2.xyz, r3.zzzz, r3.xywx, r2.xyzx
  mov r1.xy, |r1.zwzz|
  deriv_rtx_coarse r1.zw, r1.xxxy
  deriv_rty_coarse r3.xy, r1.xyxx
  add r1.zw, |r1.zzzw|, |r3.xxxy|
  div r1.zw, l(0.000000, 0.000000, 0.000694, 0.000694), r1.zzzw
  mul r1.xy, r1.zwzz, r1.xyxx
  mad r1.xy, -r1.xyxx, l(200.000000, 200.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
  max r1.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r3.xyz, -r2.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r1.xzw, r1.xxxx, r3.xxyz, r2.xxyz
  add r3.xyz, -r1.xzwx, l(1.000000, 0.000000, 0.000000, 0.000000)
  mad r1.xyz, r1.yyyy, r3.xyzx, r1.xzwx
  movc r0.xyz, cb0[10].zzzz, r1.xyzx, r2.xyzx
endif 
dp3 r0.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ge r0.w, r0.w, l(3.000000)
ine r1.x, cb0[1].y, l(0)
and r0.w, r0.w, r1.x
movc r0.xyz, r0.wwww, l(1.000000,0,0,0), r0.xyzx
dp3 r0.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ge r0.w, l(0.000000), r0.w
and r0.w, r0.w, r1.x
movc r0.xyz, r0.wwww, l(0,0,1.000000,0), r0.xyzx
if_nz cb0[1].x
  mul r0.w, cb0[6].w, l(0.003922)
  exp r1.x, cb0[7].y
  exp r1.yz, -cb0[7].zzwz
  exp r2.xyzw, -cb0[8].xyzw
  mad r3.xy, v0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(0.000000, 1440.000000, 0.000000, 0.000000)
  mul r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.003922, 0.003922)
  mad r1.w, r3.x, l(0.003922), -r0.w
  mad r0.w, cb0[7].x, l(0.003922), -r0.w
  div_sat r0.w, r1.w, r0.w
  mul r0.w, r1.x, r0.w
  log r0.w, r0.w
  mul r0.w, r0.w, r1.y
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r4.xyzw, r0.wwww, l(-0.250000, -0.500000, -0.750000, -1.000000)
  mul r5.xyzw, r4.yxzx, l(-4.000000, 4.000000, -4.000000, -4.000000)
  max r1.x, r5.w, l(0.000000)
  mad r1.y, r1.x, l(-2.000000), l(3.000000)
  mul r1.x, r1.x, r1.x
  mul r1.x, r1.x, r1.y
  mul r1.y, r0.w, l(4.000000)
  min r1.y, r1.y, l(1.000000)
  mad r1.w, r1.y, l(-2.000000), l(3.000000)
  mul r1.y, r1.y, r1.y
  mul r1.y, r1.y, r1.w
  mov_sat r5.xyz, r5.xyzx
  mad r6.xyz, r5.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
  mul r5.xyz, r5.xyzx, r5.xyzx
  mul r5.xyz, r5.xyzx, r6.xyzx
  mul r1.y, r1.y, r5.x
  mul r1.w, r5.z, r5.y
  mul r4.xyz, r4.ywzy, l(4.000000, -4.000000, 4.000000, 0.000000)
  mov_sat r4.x, r4.x
  mad r3.x, r4.x, l(-2.000000), l(3.000000)
  mul r4.x, r4.x, r4.x
  mul r3.x, r3.x, r4.x
  min r4.x, r4.y, l(1.000000)
  mad r4.y, r4.x, l(-2.000000), l(3.000000)
  mul r4.x, r4.x, r4.x
  mul r4.x, r4.x, r4.y
  mul r3.x, r3.x, r4.x
  max r4.x, r4.z, l(0.000000)
  mad r4.y, r4.x, l(-2.000000), l(3.000000)
  mul r4.x, r4.x, r4.x
  mul r4.x, r4.x, r4.y
  mul r1.y, r2.x, r1.y
  mad r1.x, r1.x, r1.z, r1.y
  mad r1.x, r1.w, r2.y, r1.x
  mad r1.x, r3.x, r2.z, r1.x
  mad r1.x, r4.x, r2.w, r1.x
  add r1.x, r1.x, l(-1.000000)
  exp r1.x, r1.x
  log r0.w, r0.w
  mul r0.w, r0.w, r1.x
  exp r0.w, r0.w
  mul r1.x, r0.w, r0.w
  mad r1.y, -r0.w, l(2.000000), l(3.000000)
  mad r1.x, r1.x, r1.y, -r0.w
  mad_sat r0.w, cb0[9].x, r1.x, r0.w
  mad_sat r1.xy, -r3.zwzz, r3.zwzz, r3.zwzz
  ne r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyxx
  and r1.x, r1.y, r1.x
  mad r0.w, -r3.y, l(0.003922), r0.w
  deriv_rtx_coarse r1.y, r0.w
  deriv_rtx_coarse r1.z, r3.z
  div r2.x, r1.y, r1.z
  mov r2.y, l(-1.000000)
  dp2 r1.y, r2.xyxx, r2.xyxx
  sqrt r1.y, r1.y
  div r0.w, |r0.w|, r1.y
  add r0.w, r0.w, l(-0.013889)
  mul r0.w, r0.w, l(-72.000000)
  max r0.w, r0.w, l(0.000000)
  mad r1.y, r0.w, l(-2.000000), l(3.000000)
  mul r0.w, r0.w, r0.w
  mul r0.w, r0.w, r1.y
  mad r1.yzw, r0.xxyz, l(0.000000, -2.000000, -2.000000, -2.000000), l(0.000000, 1.000000, 1.000000, 1.000000)
  mad r1.yzw, r0.wwww, r1.yyzw, r0.xxyz
  movc r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 139 instruction slots used
