//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int iUIColorEdgesType;             // Offset:    0 Size:     4
//   float fUIColorEdgesDetails;        // Offset:    4 Size:     4
//   float2 fUIColorEdgesStrength;      // Offset:    8 Size:     8
//   float3 fUIColorEdgesDistanceFading;// Offset:   16 Size:    12
//   bool bUIColorEdgesDebugLayer;      // Offset:   28 Size:     4
//   int iUIChromaEdgesType;            // Offset:   32 Size:     4
//   float fUIChromaEdgesDetails;       // Offset:   36 Size:     4
//   float2 fUIChromaEdgesStrength;     // Offset:   40 Size:     8
//   float3 fUIChromaEdgesDistanceFading;// Offset:   48 Size:    12
//   bool bUIChromaEdgesDebugLayer;     // Offset:   60 Size:     4
//   int iUIOutlinesEnable;             // Offset:   64 Size:     4
//   float fUIOutlinesThreshold;        // Offset:   68 Size:     4
//   float2 fUIOutlinesStrength;        // Offset:   72 Size:     8
//   float3 fUIOutlinesDistanceFading;  // Offset:   80 Size:    12
//   bool bUIOutlinesDebugLayer;        // Offset:   92 Size:     4
//   int iUIMeshEdgesEnable;            // Offset:   96 Size:     4
//   float2 fUIMeshEdgesStrength;       // Offset:  100 Size:     8
//   float iUIMeshEdgesIterations;      // Offset:  108 Size:     4
//   float3 fUIMeshEdgesDistanceFading; // Offset:  112 Size:    12
//   bool bUIMeshEdgesDebugLayer;       // Offset:  124 Size:     4
//   float3 fUIEdgesLumaWeight;         // Offset:  128 Size:    12
//   float3 fUIEdgesSaturationWeight;   // Offset:  144 Size:    12
//   bool bUIEnableDebugLayer;          // Offset:  156 Size:     4
//   int iUIShowFadingOverlay;          // Offset:  160 Size:     4
//   float3 fUIOverlayColor;            // Offset:  164 Size:    12
//   float3 fUIColor;                   // Offset:  176 Size:    12
//   float fUIStrength;                 // Offset:  188 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__ReShade__DepthBufferTex      texture  float4          2d             t2      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[12], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 13
dcl_indexableTemp x0[3], 4
dcl_indexableTemp x1[3], 4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s0, l(0.000000)
mad r1.x, -r0.w, l(999.000000), l(1000.000000)
div r1.y, r0.w, r1.x
ftoi r2.xy, v0.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyzw, t0.xyzw
iadd r4.xyzw, r2.xyxy, l(1, -1, 0, -1)
mov r5.xy, r4.zwzz
mov r5.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyzw, t0.xyzw
mov r4.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyzw, t0.xyzw
iadd r6.xyzw, r2.xyxy, l(1, 1, 1, 0)
mov r7.xy, r6.zwzz
mov r7.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xyzw, t0.xyzw
mov r6.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyzw, t0.xyzw
iadd r8.xyzw, r2.xyxy, l(-1, 1, 0, 1)
mov r9.xy, r8.zwzz
mov r9.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r9.xyz, r9.xyzw, t0.xyzw
mov r8.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r8.xyz, r8.xyzw, t0.xyzw
iadd r2.xyzw, r2.xyxy, l(-1, -1, -1, 0)
mov r10.xy, r2.zwzz
mov r10.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r10.xyz, r10.xyzw, t0.xyzw
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyzw, t0.xyzw
dp3 r0.w, r3.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r11.x, r5.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r11.y, r4.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r11.z, r7.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r11.w, r6.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r12.x, r9.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r12.y, r8.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r12.z, r10.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
dp3 r12.w, r2.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
add r3.xyz, -r0.wwww, r3.xyzx
dp3 r1.w, r3.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
add r3.xyz, r5.xyzx, -r11.xxxx
max r2.w, r3.z, r3.y
max r3.x, r2.w, r3.x
add r4.xyz, r4.xyzx, -r11.yyyy
max r2.w, r4.z, r4.y
max r3.y, r2.w, r4.x
add r4.xyz, r7.xyzx, -r11.zzzz
max r2.w, r4.z, r4.y
max r3.z, r2.w, r4.x
add r4.xyz, r6.xyzx, -r11.wwww
max r2.w, r4.z, r4.y
max r3.w, r2.w, r4.x
add r4.xyz, r9.xyzx, -r12.xxxx
max r2.w, r4.z, r4.y
max r4.x, r2.w, r4.x
add r5.xyz, r8.xyzx, -r12.yyyy
max r2.w, r5.z, r5.y
max r4.y, r2.w, r5.x
add r5.xyz, r10.xyzx, -r12.zzzz
max r2.w, r5.z, r5.y
max r4.z, r2.w, r5.x
add r2.xyz, r2.xyzx, -r12.wwww
max r2.y, r2.z, r2.y
max r4.w, r2.y, r2.x
mov x0[1].xyzw, l(0,0,0,0)
mov x0[2].xyzw, l(0,0,0,0)
mov x1[1].xyzw, l(0,0,0,0)
mov x1[2].xyzw, l(0,0,0,0)
max r2.x, cb0[6].w, l(1.000000)
min r2.x, r2.x, l(3.000000)
ftoi r2.x, r2.x
add r5.xyzw, v1.xyxy, l(0.000000, -0.000694, 0.000291, -0.000694)
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r6.x, r2.y, r2.z
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.zwzz, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r6.y, r2.y, r2.z
add r5.xyzw, v1.xyxy, l(0.000291, 0.000000, 0.000291, 0.000694)
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r6.z, r2.y, r2.z
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.zwzz, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r6.w, r2.y, r2.z
mov x0[0].xyzw, r6.xyzw
add r5.xyzw, v1.xyxy, l(0.000000, 0.000694, -0.000291, 0.000694)
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r7.x, r2.y, r2.z
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.zwzz, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r7.y, r2.y, r2.z
add r5.xyzw, v1.xyxy, l(-0.000291, 0.000000, -0.000291, -0.000694)
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.xyxx, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r7.z, r2.y, r2.z
sample_l_indexable(texture2d)(float,float,float,float) r2.y, r5.zwzz, t2.yxzw, s0, l(0.000000)
mad r2.z, -r2.y, l(999.000000), l(1000.000000)
div r7.w, r2.y, r2.z
mov x1[0].xyzw, r7.xyzw
ilt r2.y, l(1), r2.x
if_nz r2.y
  add r5.xyzw, v1.xyxy, l(0.000000, -0.001389, 0.000581, -0.001389)
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.x, r2.z, r2.w
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.zwzz, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.y, r2.z, r2.w
  add r5.xyzw, v1.xyxy, l(0.000581, 0.000000, 0.000581, 0.001389)
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.z, r2.z, r2.w
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.zwzz, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.w, r2.z, r2.w
  mov x0[1].xyzw, r8.xyzw
  add r5.xyzw, v1.xyxy, l(0.000000, 0.001389, -0.000581, 0.001389)
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.x, r2.z, r2.w
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.zwzz, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.y, r2.z, r2.w
  add r5.xyzw, v1.xyxy, l(-0.000581, 0.000000, -0.000581, -0.001389)
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.xyxx, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.z, r2.z, r2.w
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r5.zwzz, t2.yzxw, s0, l(0.000000)
  mad r2.w, -r2.z, l(999.000000), l(1000.000000)
  div r8.w, r2.z, r2.w
  mov x1[1].xyzw, r8.xyzw
  ilt r2.x, l(2), r2.x
else 
  mov r2.x, l(0)
endif 
and r2.x, r2.x, r2.y
if_nz r2.x
  add r2.xyzw, v1.xyxy, l(0.000000, -0.002083, 0.000872, -0.002083)
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.x, r2.x, r2.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.y, r2.x, r2.y
  add r2.xyzw, v1.xyxy, l(0.000872, 0.000000, 0.000872, 0.002083)
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.z, r2.x, r2.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.w, r2.x, r2.y
  mov x0[2].xyzw, r5.xyzw
  add r2.xyzw, v1.xyxy, l(0.000000, 0.002083, -0.000872, 0.002083)
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.x, r2.x, r2.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.y, r2.x, r2.y
  add r2.xyzw, v1.xyxy, l(-0.000872, 0.000000, -0.000872, -0.002083)
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.z, r2.x, r2.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mad r2.y, -r2.x, l(999.000000), l(1000.000000)
  div r5.w, r2.x, r2.y
  mov x1[2].xyzw, r5.xyzw
endif 
add r2.xyzw, r11.xyzw, -r12.xyzw
add r2.x, |r2.y|, |r2.x|
add r2.x, |r2.z|, r2.x
add r2.x, |r2.w|, r2.x
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r2.x
ilt r2.x, l(1), cb0[0].x
mad r5.xyzw, cb0[0].yyyy, l(-2.000000, -8.000000, 2.000000, 8.000000), l(-1.000000, -2.000000, 1.000000, 2.000000)
mul r2.yz, r5.xxyx, r11.yyzy
add r2.y, r2.z, r2.y
mad r2.y, r11.w, r5.x, r2.y
mad r2.y, r12.y, r5.z, r2.y
mad r2.y, r12.z, r5.w, r2.y
mad r2.y, r12.w, r5.z, r2.y
mad r8.xyz, cb0[0].yyyy, l(8.000000, 2.000000, -2.000000, 0.000000), l(2.000000, 1.000000, -1.000000, 0.000000)
mul r2.zw, r8.xxxy, r11.xxxy
mad r8.xyw, cb0[0].yyyy, l(-8.000000, -2.000000, 0.000000, 2.000000), l(-2.000000, -1.000000, 0.000000, 1.000000)
add r2.z, r2.w, r2.z
mad r2.z, r11.w, r8.z, r2.z
mad r2.z, r12.x, r8.x, r2.z
mad r2.z, r12.y, r8.y, r2.z
mad r2.z, r12.w, r8.w, r2.z
max r2.y, r2.z, r2.y
ieq r2.zw, cb0[0].xxxx, l(0, 0, 1, 3)
mul r9.xy, r5.zwzz, r11.yzyy
add r5.w, r9.y, r9.x
mad r5.z, r11.w, r5.z, r5.w
mad r5.z, r12.y, r5.x, r5.z
mad r5.y, r12.z, r5.y, r5.z
mad r5.x, r12.w, r5.x, r5.y
mul r5.yz, r8.xxyx, r11.xxyx
mad r8.xyz, cb0[0].yyyy, l(-12.000000, 2.000000, -2.000000, 0.000000), l(2.000000, 1.000000, -1.000000, 0.000000)
add r5.y, r5.z, r5.y
mad r5.y, r11.w, r8.w, r5.y
mad r5.y, r12.x, r8.x, r5.y
mad r5.y, r12.y, r8.y, r5.y
mad r5.y, r12.w, r8.z, r5.y
max r5.x, r5.y, r5.x
max r5.x, r2.y, r5.x
movc r2.y, r2.w, r5.x, r2.y
and r2.x, r2.y, r2.x
movc r2.x, r2.z, r0.w, r2.x
add r5.xyzw, r3.xyzw, -r4.xyzw
add r0.w, |r5.y|, |r5.x|
add r0.w, |r5.z|, r0.w
add r0.w, |r5.w|, r0.w
add r1.w, -r1.w, l(1.000000)
mul r0.w, r0.w, r1.w
ilt r1.w, l(1), cb0[2].x
mad r5.xyzw, cb0[2].yyyy, l(-2.000000, -8.000000, 2.000000, 8.000000), l(-1.000000, -2.000000, 1.000000, 2.000000)
mul r8.xy, r3.yzyy, r5.xyxx
add r8.x, r8.y, r8.x
mad r8.x, r3.w, r5.x, r8.x
mad r8.x, r4.y, r5.z, r8.x
mad r8.x, r4.z, r5.w, r8.x
mad r8.x, r4.w, r5.z, r8.x
mad r8.yzw, cb0[2].yyyy, l(0.000000, 8.000000, 2.000000, -2.000000), l(0.000000, 2.000000, 1.000000, -1.000000)
mul r8.yz, r3.xxyx, r8.yyzy
mad r9.xyz, cb0[2].yyyy, l(-8.000000, -2.000000, 2.000000, 0.000000), l(-2.000000, -1.000000, 1.000000, 0.000000)
add r8.y, r8.z, r8.y
mad r8.y, r3.w, r8.w, r8.y
mad r8.y, r4.x, r9.x, r8.y
mad r8.y, r4.y, r9.y, r8.y
mad r8.y, r4.w, r9.z, r8.y
max r8.x, r8.y, r8.x
ieq r8.yz, cb0[2].xxxx, l(0, 1, 3, 0)
mul r10.xy, r3.yzyy, r5.zwzz
add r3.z, r10.y, r10.x
mad r3.z, r3.w, r5.z, r3.z
mad r3.z, r4.y, r5.x, r3.z
mad r3.z, r4.z, r5.y, r3.z
mad r3.z, r4.w, r5.x, r3.z
mul r3.xy, r3.xyxx, r9.xyxx
mad r5.xyz, cb0[2].yyyy, l(-12.000000, 2.000000, -2.000000, 0.000000), l(2.000000, 1.000000, -1.000000, 0.000000)
add r3.x, r3.y, r3.x
mad r3.x, r3.w, r9.z, r3.x
mad r3.x, r4.x, r5.x, r3.x
mad r3.x, r4.y, r5.y, r3.x
mad r3.x, r4.w, r5.z, r3.x
max r3.x, r3.x, r3.z
max r3.x, r3.x, r8.x
movc r3.x, r8.z, r3.x, r8.x
and r1.w, r1.w, r3.x
movc r2.y, r8.y, r0.w, r1.w
add r3.yz, v1.xxyx, l(0.000000, 0.000000, -0.000694, 0.000000)
mov r3.x, r6.x
mov r1.xz, v1.yyxy
add r3.yzw, r1.yyzx, -r3.xxyz
add r4.xz, v1.yyxy, l(0.000000, 0.000000, 0.000291, 0.000000)
mov r4.y, r6.z
add r1.xzw, r1.xxyz, -r4.xxyz
mul r4.xyz, r1.xzwx, r3.yzwy
mad r1.xzw, r3.wwyz, r1.zzwx, -r4.xxyz
dp3 r0.w, r1.xzwx, r1.xzwx
rsq r0.w, r0.w
mul r0.w, r0.w, r1.w
mad_sat r0.w, r0.w, l(0.500000), l(0.500000)
add r0.w, -r0.w, l(1.000000)
ieq r1.xz, cb0[4].xxxx, l(1, 0, 2, 0)
max r1.w, r6.w, r6.z
max r1.w, r1.w, r6.y
max r1.w, r1.w, r3.x
max r3.y, r7.w, r7.z
max r3.y, r3.y, r7.y
max r3.y, r3.y, r7.x
max r1.w, r1.w, r3.y
min r3.y, r6.w, r6.z
min r3.y, r3.y, r6.y
min r3.x, r3.y, r3.x
min r3.y, r7.w, r7.z
min r3.y, r3.y, r7.y
min r3.y, r3.y, r7.x
min r3.x, r3.y, r3.x
add r1.w, r1.w, -r3.x
mul r3.x, cb0[4].y, l(0.001000)
lt r1.w, r1.w, r3.x
movc r1.w, r1.w, l(0), l(1.000000)
and r1.z, r1.w, r1.z
movc r2.z, r1.x, r0.w, r1.z
if_nz cb0[6].x
  lt r0.w, l(0.000000), cb0[6].w
  mov r2.w, l(0)
  mov r1.x, l(0)
  mov r1.z, r0.w
  loop 
    breakc_z r1.z
    mov r3.xyzw, x0[r1.x + 0].xyzw
    mov r4.xyzw, x1[r1.x + 0].xyzw
    min r5.xy, r3.zwzz, r4.zwzz
    min r5.xy, r4.xyxx, r5.xyxx
    min r5.xy, r3.xyxx, r5.xyxx
    max r5.zw, r3.zzzw, r4.zzzw
    max r5.zw, r4.xxxy, r5.zzzw
    max r5.zw, r3.xxxy, r5.zzzw
    max r1.w, r5.w, r5.z
    min r5.x, r5.y, r5.x
    add r1.w, r1.w, -r5.x
    add r1.w, r1.w, l(0.000010)
    div r5.x, r1.y, r1.w
    mov r6.xz, r3.xxzx
    mov r6.yw, r4.xxxz
    div r6.xyzw, r6.xyzw, r1.wwww
    mov r4.xz, r3.yywy
    div r3.xyzw, r4.xyzw, r1.wwww
    add r4.xyzw, -r5.xxxx, r6.xyzw
    add r3.xyzw, -r5.xxxx, r3.xyzw
    add r4.xy, -|r4.ywyy|, |r4.xzxx|
    max r1.w, |r4.y|, |r4.x|
    add r3.xy, -|r3.ywyy|, |r3.xzxx|
    max r3.x, |r3.y|, |r3.x|
    max r1.w, r1.w, r3.x
    max r2.w, r1.w, r2.w
    iadd r1.x, r1.x, l(1)
    itof r1.w, r1.x
    lt r1.z, r1.w, cb0[6].w
  endloop 
else 
  mov r2.w, l(0)
endif 
mov_sat r2.xyzw, r2.xyzw
log r2.xyzw, r2.xyzw
mul r0.w, r2.x, cb0[0].z
exp r0.w, r0.w
mul r3.x, r0.w, cb0[0].w
mul r0.w, r2.y, cb0[2].z
exp r0.w, r0.w
mul r3.y, r0.w, cb0[2].w
mul r0.w, r2.z, cb0[4].z
exp r0.w, r0.w
mul r3.z, r0.w, cb0[4].w
mul r0.w, r2.w, cb0[6].y
exp r0.w, r0.w
mul r3.w, r0.w, cb0[6].z
dp3 r0.w, r0.xyzx, l(0.212600, 0.715100, 0.072100, 0.000000)
add r1.x, -cb0[8].z, l(1.000000)
mad r1.z, -cb0[8].x, l(1.200000), r0.w
add r1.z, r1.z, l(0.200000)
max r1.xz, r1.xxzx, l(0.000100, 0.000000, 0.000100, 0.000000)
add r1.xz, r1.xxzx, l(-0.000100, 0.000000, -0.000100, 0.000000)
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul_sat r1.z, r1.x, r1.z
mad r1.w, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r1.w
add r0.w, -r0.w, l(1.000000)
mad r0.w, cb0[8].y, l(1.200000), r0.w
add r0.w, r0.w, l(-1.000000)
max r0.w, r0.w, l(0.000100)
add r0.w, r0.w, l(-0.000100)
mul_sat r0.w, r1.x, r0.w
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
mul r0.w, r0.w, r1.z
max r1.x, r0.z, r0.y
max r1.x, r0.x, r1.x
min r1.z, r0.z, r0.y
min r1.z, r0.x, r1.z
add r1.x, -r1.z, r1.x
add r1.z, -cb0[9].z, l(1.000000)
mad r1.w, -cb0[9].x, l(1.200000), r1.x
add r1.w, r1.w, l(0.200000)
max r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000100, 0.000100)
add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.000100, -0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul_sat r1.w, r1.z, r1.w
mad r2.x, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.x
add r1.x, -r1.x, l(1.000000)
mad r1.x, cb0[9].y, l(1.200000), r1.x
add r1.x, r1.x, l(-1.000000)
max r1.x, r1.x, l(0.000100)
add r1.x, r1.x, l(-0.000100)
mul_sat r1.x, r1.z, r1.x
mad r1.z, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.z
mul r1.x, r1.x, r1.w
add r1.z, -cb0[1].z, l(1.000000)
mad r1.w, -cb0[1].x, l(1.200000), r1.y
add r1.w, r1.w, l(0.200000)
max r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000100, 0.000100)
add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.000100, -0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul_sat r1.w, r1.z, r1.w
mad r2.x, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.x
add r2.x, -r1.y, l(1.000000)
mad r2.y, cb0[1].y, l(1.200000), r2.x
add r2.y, r2.y, l(-1.000000)
max r2.y, r2.y, l(0.000100)
add r2.y, r2.y, l(-0.000100)
mul_sat r1.z, r1.z, r2.y
mad r2.y, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r2.y
mul r4.x, r1.z, r1.w
add r1.z, -cb0[3].z, l(1.000000)
mad r1.w, -cb0[3].x, l(1.200000), r1.y
add r1.w, r1.w, l(0.200000)
max r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000100, 0.000100)
add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.000100, -0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul_sat r1.w, r1.z, r1.w
mad r2.y, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.y
mad r2.y, cb0[3].y, l(1.200000), r2.x
add r2.y, r2.y, l(-1.000000)
max r2.y, r2.y, l(0.000100)
add r2.y, r2.y, l(-0.000100)
mul_sat r1.z, r1.z, r2.y
mad r2.y, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r2.y
mul r4.y, r1.z, r1.w
add r1.z, -cb0[5].z, l(1.000000)
mad r1.w, -cb0[5].x, l(1.200000), r1.y
add r1.w, r1.w, l(0.200000)
max r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000100, 0.000100)
add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.000100, -0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul_sat r1.w, r1.z, r1.w
mad r2.y, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.y
mad r2.y, cb0[5].y, l(1.200000), r2.x
add r2.y, r2.y, l(-1.000000)
max r2.y, r2.y, l(0.000100)
add r2.y, r2.y, l(-0.000100)
mul_sat r1.z, r1.z, r2.y
mad r2.y, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r2.y
mul r4.z, r1.z, r1.w
add r1.z, -cb0[7].z, l(1.000000)
mad r1.y, -cb0[7].x, l(1.200000), r1.y
add r1.y, r1.y, l(0.200000)
max r1.yz, r1.yyzy, l(0.000000, 0.000100, 0.000100, 0.000000)
add r1.yz, r1.yyzy, l(0.000000, -0.000100, -0.000100, 0.000000)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mul_sat r1.y, r1.z, r1.y
mad r1.w, r1.y, l(-2.000000), l(3.000000)
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r1.w
mad r1.w, cb0[7].y, l(1.200000), r2.x
add r1.w, r1.w, l(-1.000000)
max r1.w, r1.w, l(0.000100)
add r1.w, r1.w, l(-0.000100)
mul_sat r1.z, r1.z, r1.w
mad r1.w, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r1.w
mul r4.w, r1.z, r1.y
min r1.y, r0.w, r1.x
mul r2.xyzw, r1.yyyy, r4.xyzw
mul r2.xyzw, r2.xyzw, r3.xyzw
if_nz cb0[9].w
  movc r1.y, cb0[1].w, l(1.000000), l(0)
  movc r1.z, cb0[3].w, l(1.000000), l(0)
  movc r1.w, cb0[5].w, l(1.000000), l(0)
  mul r1.yzw, r1.yyzw, r2.xxyz
  movc r3.x, cb0[7].w, l(1.000000), l(0)
  mul r3.x, r2.w, r3.x
  max r1.w, r1.w, r3.x
  max r1.z, r1.w, r1.z
  max r1.yzw, r1.zzzz, r1.yyyy
  if_nz cb0[10].x
    add r3.xyz, r1.wwww, -cb0[10].yzwy
    mad r5.xyz, r4.xxxx, r3.xyzx, cb0[10].yzwy
    mad r6.xyz, r4.yyyy, r3.xyzx, cb0[10].yzwy
    mad r4.xyz, r4.zzzz, r3.xyzx, cb0[10].yzwy
    ieq r7.xyzw, cb0[10].xxxx, l(1, 2, 3, 4)
    mad r8.xyz, r4.wwww, r3.xyzx, cb0[10].yzwy
    mad r9.xyz, r0.wwww, r3.xyzx, cb0[10].yzwy
    ieq r10.xy, cb0[10].xxxx, l(5, 6, 0, 0)
    mad r3.xyz, r1.xxxx, r3.xyzx, cb0[10].yzwy
    movc r3.xyz, r10.yyyy, r3.xyzx, r1.yzwy
    movc r3.xyz, r10.xxxx, r9.xyzx, r3.xyzx
    movc r3.xyz, r7.wwww, r8.xyzx, r3.xyzx
    movc r3.xyz, r7.zzzz, r4.xyzx, r3.xyzx
    movc r3.xyz, r7.yyyy, r6.xyzx, r3.xyzx
    movc o0.xyz, r7.xxxx, r5.xyzx, r3.xyzx
  else 
    mov o0.xyz, r1.yzwy
  endif 
  ret 
endif 
max r0.w, r2.w, r2.z
max r0.w, r0.w, r2.y
max r0.w, r0.w, r2.x
mul r0.w, r0.w, cb0[11].w
add r1.xyz, -r0.xyzx, cb0[11].xyzx
mad_sat o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
ret 
// Approximately 509 instruction slots used
