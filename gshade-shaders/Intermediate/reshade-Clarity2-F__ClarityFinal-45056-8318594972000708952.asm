//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int ClarityRadiusTwo;              // Offset:    0 Size:     4 [unused]
//   float ClarityOffsetTwo;            // Offset:    4 Size:     4
//   int ClarityBlendModeTwo;           // Offset:    8 Size:     4
//   int ClarityBlendIfDarkTwo;         // Offset:   12 Size:     4
//   int ClarityBlendIfLightTwo;        // Offset:   16 Size:     4
//   float BlendIfRange;                // Offset:   20 Size:     4
//   float ClarityStrengthTwo;          // Offset:   24 Size:     4
//   float MaskContrast;                // Offset:   28 Size:     4
//   float ClarityDarkIntensityTwo;     // Offset:   32 Size:     4
//   float ClarityLightIntensityTwo;    // Offset:   36 Size:     4
//   float DitherStrength;              // Offset:   40 Size:     4
//   int PreprocessorDefinitions;       // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__Clarity2Tex                  texture  float4          2d             t4      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
div r0.xy, v1.xyxx, cb0[0].yyyy
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t4.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t0.wxyz, s0
dp3 r1.x, r0.yzwy, l(0.327869, 0.655738, 0.016393, 0.000000)
div r0.yzw, r0.yyzw, r1.xxxx
add r0.x, -r0.x, l(1.000000)
ne r1.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[1].w
add r1.z, -r1.x, l(1.000000)
add r1.w, r0.x, r0.x
div r1.w, r1.z, r1.w
add r1.w, -r1.w, l(1.000000)
add r2.x, -r0.x, l(1.000000)
add r2.x, r2.x, r2.x
div r2.x, r1.x, r2.x
add r1.w, r1.w, r2.x
mul_sat r1.w, r1.w, l(0.500000)
add r0.x, r0.x, r1.x
mul r2.x, r0.x, l(0.500000)
mad r0.x, -r0.x, l(0.500000), r1.w
mad r0.x, cb0[1].w, r0.x, r2.x
movc r0.x, r1.y, r0.x, r2.x
ne r1.yw, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[2].xxxy
or r1.y, r1.w, r1.y
mul r1.w, r0.x, r0.x
mul r1.w, r0.x, r1.w
mad r2.x, r0.x, l(6.000000), l(-15.000000)
mad r2.x, r0.x, r2.x, l(10.000000)
mad r1.w, r1.w, r2.x, -r0.x
mad r2.xy, cb0[2].xyxx, r1.wwww, r0.xxxx
ge r1.w, r0.x, l(0.500000)
and r2.z, r1.w, l(0x3f800000)
movc r1.w, r1.w, l(0), l(1.000000)
mul r2.y, r2.z, r2.y
mad r1.w, r2.x, r1.w, r2.y
movc r0.x, r1.y, r1.w, r0.x
dp2 r1.y, v1.xyxx, l(12.989800, -78.233002, 0.000000, 0.000000)
sincos r1.y, null, r1.y
mad r1.y, r1.y, l(43758.542969), v1.x
frc r1.y, r1.y
mad r1.y, -r1.y, l(0.015873), r0.x
add r1.y, r1.y, l(-0.007937)
add r1.y, -r0.x, r1.y
mad r0.x, cb0[2].z, r1.y, r0.x
if_z cb0[0].z
  add r1.y, r1.x, r1.x
  mul r1.w, r1.x, r1.x
  mad r2.x, -r0.x, l(2.000000), l(1.000000)
  mul r1.w, r1.w, r2.x
  mad r1.w, r1.y, r0.x, r1.w
  add r2.x, -r0.x, l(1.000000)
  rsq r2.y, r1.x
  div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
  mad r2.z, r0.x, l(2.000000), l(-1.000000)
  mul r2.y, r2.z, r2.y
  mad r1.y, r1.y, r2.x, r2.y
  ge r2.x, r0.x, l(0.490000)
  and r2.x, r2.x, l(0x3f800000)
  add r1.y, -r1.w, r1.y
  mad r1.y, r2.x, r1.y, r1.w
else 
  ieq r1.w, cb0[0].z, l(1)
  if_nz r1.w
    dp2 r1.w, r0.xxxx, r1.xxxx
    add r2.x, r1.z, r1.z
    add r2.y, -r0.x, l(1.000000)
    mad r2.x, -r2.x, r2.y, l(1.000000)
    ge r2.y, r1.x, l(0.500000)
    and r2.y, r2.y, l(0x3f800000)
    add r2.x, -r1.w, r2.x
    mad r1.y, r2.y, r2.x, r1.w
  else 
    ieq r1.w, cb0[0].z, l(2)
    if_nz r1.w
      dp2 r1.w, r0.xxxx, r1.xxxx
      add r2.x, r1.z, r1.z
      add r2.y, -r0.x, l(1.000000)
      mad r2.x, -r2.x, r2.y, l(1.000000)
      ge r2.y, r0.x, l(0.500000)
      and r2.y, r2.y, l(0x3f800000)
      add r2.x, -r1.w, r2.x
      mad r1.y, r2.y, r2.x, r1.w
    else 
      dp2 r1.w, r0.xxxx, r1.xxxx
      mov_sat r2.x, r1.w
      add r2.y, -r0.x, l(1.000000)
      add r2.y, r2.y, r2.y
      div r2.y, r1.x, r2.y
      ge r2.z, r0.x, l(0.500000)
      and r2.z, r2.z, l(0x3f800000)
      add r2.y, -r1.w, r2.y
      mad r1.w, r2.z, r2.y, r1.w
      mad r2.y, r0.x, l(2.000000), r1.x
      add r2.y, r2.y, l(-1.000000)
      ieq r3.xyzw, cb0[0].zzzz, l(3, 4, 5, 6)
      add r2.z, r1.x, r0.x
      add_sat r2.z, r2.z, l(-0.500000)
      movc r0.x, r3.w, r2.z, r0.x
      movc r0.x, r3.z, r2.y, r0.x
      movc r0.x, r3.y, r1.w, r0.x
      movc r1.y, r3.x, r2.x, r0.x
    endif 
  endif 
endif 
ilt r0.x, cb0[1].x, l(255)
ine r1.w, cb0[0].w, l(0)
or r0.x, r0.x, r1.w
iadd r1.w, -cb0[0].w, l(255)
itof r1.w, r1.w
mul r2.x, r1.w, l(0.003922)
itof r2.y, cb0[1].x
mul r2.z, r2.y, l(0.003922)
mul r2.x, r2.x, cb0[1].y
mad r2.w, r1.w, l(0.003922), -r2.x
mad r1.w, r1.w, l(0.003922), r2.x
add r1.zw, r1.zzzw, -r2.wwww
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r1.z, r1.w, r1.z
mad r1.w, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mad r1.z, -r1.w, r1.z, l(1.000000)
movc r1.z, cb0[0].w, r1.z, l(1.000000)
mul r1.w, r2.z, cb0[1].y
mad r2.x, r2.y, l(0.003922), -r1.w
mad r1.w, r2.y, l(0.003922), r1.w
add r1.w, -r2.x, r1.w
add r2.x, r1.x, -r2.x
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r1.w, r1.w, r2.x
mad r2.x, r1.w, l(-2.000000), l(3.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, r2.x
mad r1.w, r1.w, -r1.z, r1.z
movc r1.z, cb0[1].x, r1.w, r1.z
add r1.w, -r1.x, r1.y
mad r1.z, r1.z, r1.w, r1.x
movc r0.x, r0.x, r1.z, r1.y
add r0.x, -r1.x, r0.x
mad r0.x, cb0[1].z, r0.x, r1.x
mul o0.xyz, r0.yzwy, r0.xxxx
mov o0.w, l(0)
ret 
// Approximately 141 instruction slots used
