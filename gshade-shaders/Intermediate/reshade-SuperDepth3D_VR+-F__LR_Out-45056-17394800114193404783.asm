//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   int IPD;                           // Offset:    0 Size:     4
//   float Divergence;                  // Offset:    4 Size:     4
//   float2 ZPD_Separation;             // Offset:    8 Size:     8 [unused]
//   int Auto_Balance_Ex;               // Offset:   16 Size:     4 [unused]
//   int ZPD_Boundary;                  // Offset:   20 Size:     4 [unused]
//   float2 ZPD_Boundary_n_Fade;        // Offset:   24 Size:     8 [unused]
//   int View_Mode;                     // Offset:   32 Size:     4
//   int Custom_Sidebars;               // Offset:   36 Size:     4 [unused]
//   float Max_Depth;                   // Offset:   40 Size:     4 [unused]
//   int Performance_Level;             // Offset:   44 Size:     4
//   float DLSS_FSR_Offset;             // Offset:   48 Size:     4 [unused]
//   int Depth_Map;                     // Offset:   52 Size:     4 [unused]
//   float Depth_Map_Adjust;            // Offset:   56 Size:     4 [unused]
//   float Offset;                      // Offset:   60 Size:     4 [unused]
//   float Auto_Depth_Adjust;           // Offset:   64 Size:     4 [unused]
//   bool Depth_Map_View;               // Offset:   68 Size:     4
//   bool Depth_Detection;              // Offset:   72 Size:     4 [unused]
//   bool Depth_Map_Flip;               // Offset:   76 Size:     4 [unused]
//   int WP;                            // Offset:   80 Size:     4
//   float4 Weapon_Adjust;              // Offset:   96 Size:    16 [unused]
//   float3 WZPD_and_WND;               // Offset:  112 Size:    12 [unused]
//   int FPSDFIO;                       // Offset:  124 Size:     4
//   int3 Eye_Fade_Reduction_n_Power;   // Offset:  128 Size:    12
//   float Weapon_ZPD_Boundary;         // Offset:  140 Size:     4 [unused]
//   int Cursor_Type;                   // Offset:  144 Size:     4
//   int2 Cursor_SC;                    // Offset:  148 Size:     8
//   bool Cursor_Lock;                  // Offset:  156 Size:     4
//   int Barrel_Distortion;             // Offset:  160 Size:     4 [unused]
//   float FoV;                         // Offset:  164 Size:     4
//   float3 Polynomial_Colors_K1;       // Offset:  176 Size:    12 [unused]
//   float3 Polynomial_Colors_K2;       // Offset:  192 Size:    12 [unused]
//   bool Theater_Mode;                 // Offset:  204 Size:     4
//   float Blinders;                    // Offset:  208 Size:     4 [unused]
//   float Adjust_Vignette;             // Offset:  212 Size:     4
//   float Sharpen_Power;               // Offset:  216 Size:     4 [unused]
//   float Saturation;                  // Offset:  220 Size:     4
//   bool NCAOC;                        // Offset:  224 Size:     4 [unused]
//   bool Cancel_Depth;                 // Offset:  228 Size:     4 [unused]
//   bool Mask_Cycle;                   // Offset:  232 Size:     4 [unused]
//   bool Text_Info;                    // Offset:  236 Size:     4 [unused]
//   bool CLK;                          // Offset:  240 Size:     4
//   bool Trigger_Fade_A;               // Offset:  244 Size:     4
//   bool Trigger_Fade_B;               // Offset:  248 Size:     4
//   bool overlay_open;                 // Offset:  252 Size:     4 [unused]
//   float2 Mousecoords;                // Offset:  256 Size:     8
//   float frametime;                   // Offset:  264 Size:     4
//   float timer;                       // Offset:  268 Size:     4 [unused]
//   bool DepthCheck;                   // Offset:  272 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __s2                              sampler      NA          NA             s2      1 
// __s3                              sampler      NA          NA             s3      1 
// __s4                              sampler      NA          NA             s4      1 
// __V__BackBufferTex                texture  float4          2d             t2      1 
// __V__texDMVR                      texture  float4          2d             t4      1 
// __V__texzBufferVR_P               texture  float4          2d             t6      1 
// __V__texzBufferVR_L               texture  float4          2d             t8      1 
// __V__texLumVR                     texture  float4          2d            t16      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[17], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t16
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 12
dcl_indexableTemp x0[2], 4
dcl_indexableTemp x1[2], 4
dcl_indexableTemp x2[2], 4
dcl_indexableTemp x3[2], 4
dcl_indexableTemp x4[11], 4
dcl_indexableTemp x5[11], 4
mov x0[0].x, l(0.500000)
mov x0[1].x, l(1.000000)
mov x1[0].z, l(0.679000)
mov x1[1].z, l(1.425000)
mov x2[0].z, l(0.679000)
mov x2[1].z, l(1.425000)
mov x3[0].x, l(0.500000)
mov x3[1].x, l(1.000000)
mul r0.x, cb0[10].y, l(-0.400000)
mad r0.y, -cb0[10].y, l(0.800000), l(1.000000)
mad r0.x, v1.x, r0.y, -r0.x
movc r0.x, cb0[12].w, v1.x, r0.x
movc r0.yz, cb0[12].wwww, l(0,2.000000,-0.500000,0), l(0,1.000000,-0.000000,0)
mad r1.z, v1.y, r0.y, r0.z
itof r0.y, cb0[0].x
mad r1.w, -r0.y, l(0.000145), r0.x
mad r0.w, r0.y, l(0.000145), r0.x
sample_indexable(texture2d)(float,float,float,float) r2.x, l(0.000000, 0.083000, 0.000000, 0.000000), t16.zxyw, s2
ieq r3.xyzw, cb0[8].zyyx, l(2, 1, 2, 1)
ieq r2.yz, cb0[7].wwww, l(0, 1, 2, 0)
movc r4.xy, cb0[15].yzyy, l(1.000000,1.000000,0,0), l(0,0,0,0)
and r2.w, r2.z, r4.y
movc r2.w, r2.y, r4.x, r2.w
add r2.w, -r2.x, r2.w
movc r3.xz, r3.xxzx, l(156.250000,0,0.300000,0), l(437.500000,0,0.100000,0)
movc r3.x, cb0[8].z, r3.x, l(718.750000)
div r3.x, -cb0[16].z, r3.x
mul r3.x, r3.x, l(1.442695)
exp r3.x, r3.x
add r3.x, -r3.x, l(1.000000)
mad r2.x, r2.w, r3.x, r2.x
add_sat r2.x, -r2.x, l(1.000000)
mad r2.w, r2.x, l(-2.000000), l(3.000000)
mul r2.x, r2.x, r2.x
mul r2.x, r2.x, r2.w
movc r2.w, r3.y, l(0.200000), r3.z
or r2.y, r2.z, r2.y
mul r2.z, r2.w, cb0[0].y
mad r2.w, -cb0[0].y, r2.w, cb0[0].y
mad r2.x, r2.x, r2.w, r2.z
movc r2.x, r2.y, r2.x, cb0[0].y
ieq r2.w, cb0[8].x, l(2)
movc r2.z, r2.w, cb0[0].y, r2.x
mov r2.y, cb0[0].y
movc r2.xy, r3.wwww, r2.yxyy, r2.xzxx
mul r2.zw, r2.xxxy, l(0.000000, 0.000000, -0.000291, 0.000291)
sample_l_indexable(texture2d)(float,float,float,float) r3.x, r1.wzww, t6.yxzw, s3, l(0.000000)
mov_sat r3.x, r3.x
mad r3.y, r3.x, l(-2.000000), l(3.000000)
mul r3.x, r3.x, r3.x
mul r3.x, r3.x, r3.y
mov r3.y, cb0[2].w
mov r3.z, x0[r3.y + 0].x
mul r4.xy, r1.wzww, l(3440.000000, 1440.000000, 0.000000, 0.000000)
round_ni r4.xy, r4.xyxx
ieq r5.xyzw, cb0[2].xxxx, l(1, 2, 3, 4)
if_nz r5.x
  mul r3.w, r4.y, r4.x
  mul r4.z, r3.w, l(0.500000)
  frc r4.z, |r4.z|
  add r4.z, r4.z, r4.z
  lt r3.w, r3.w, l(0.000000)
  movc r3.w, r3.w, -r4.z, r4.z
  add r4.z, r4.y, r4.x
  mul r4.w, r4.z, l(0.500000)
  frc r4.w, |r4.w|
  add r4.w, r4.w, r4.w
  lt r4.z, r4.z, l(0.000000)
  movc r4.z, r4.z, -r4.w, r4.w
  ne r4.z, l(0.000000, 0.000000, 0.000000, 0.000000), r4.z
  movc r4.z, r4.z, l(1.020000), l(1.025000)
  ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.w
  mov r4.w, x1[r3.y + 0].z
  movc r3.w, r3.w, r4.w, r4.z
else 
  mov r3.w, r3.z
endif 
if_nz r5.y
  mov r3.w, x2[r3.y + 0].z
endif 
if_nz r5.z
  mov r3.w, x3[r3.y + 0].x
endif 
add r4.x, r4.y, r4.x
mul r4.z, r4.x, l(0.500000)
frc r4.z, |r4.z|
add r4.z, r4.z, r4.z
lt r4.x, r4.x, l(0.000000)
movc r4.x, r4.x, -r4.z, r4.z
ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
ge r4.zw, r3.xxxx, l(0.000000, 0.000000, 0.999000, 0.875000)
movc r6.xy, r4.xxxx, l(0.500000,1.020000,0,0), l(1.025000,0.500000,0,0)
movc r4.x, r4.w, r6.y, r6.x
movc r4.x, r4.z, r6.x, r4.x
movc r3.w, r5.w, r4.x, r3.w
mul r3.w, |r2.x|, r3.w
lt r4.x, l(0.998000), r3.x
and r4.x, r4.x, l(0x3f800000)
add r4.zw, |r2.xxxy|, l(0.000000, 0.000000, -20.000000, -20.000000)
mad r4.x, r4.x, r4.z, l(20.000000)
movc r4.x, cb0[2].w, l(20.000000), r4.x
max r3.w, r3.w, r4.x
min r3.w, r3.w, l(200.000000)
rcp r3.w, r3.w
ilt r4.x, l(0), cb0[2].x
lt r2.x, -r2.x, l(0.000000)
movc r4.z, r2.x, l(-75.000000), l(75.000000)
mul r6.x, r2.z, r3.w
sample_l_indexable(texture2d)(float,float,float,float) r6.y, r1.wzww, t8.yxzw, s4, l(0.000000)
movc r6.zw, r4.xxxx, l(0,0,0.050000,0), l(0,0,0.025000,1.000000)
mul r4.z, r4.z, r6.z
lt r7.x, l(0.000000), r6.y
mul r7.y, r6.w, r4.z
mov r7.z, r1.w
mov r7.w, r6.y
mov r8.x, l(0)
mov r8.y, r7.x
loop 
  breakc_z r8.y
  mad r8.z, -r2.z, r3.w, r7.z
  mad r1.y, -r7.y, l(0.000581), r8.z
  sample_l_indexable(texture2d)(float,float,float,float) r8.w, r1.yzyy, t8.yzwx, s4, l(0.000000)
  add r9.x, r3.w, r8.x
  lt r9.y, r9.x, r8.w
  mov r7.zw, r8.zzzw
  mov r8.xy, r9.xyxx
  continue 
endloop 
mad r2.z, r2.z, r3.w, r7.z
sample_l_indexable(texture2d)(float,float,float,float) r6.y, r1.wzww, t4.xyzw, s2, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r1.wzww, t16.xyzw, s2, l(1.400000)
add r1.w, -r1.w, l(1.000000)
add r1.w, -r6.y, r1.w
add r1.w, -r1.w, l(1.000000)
add r6.y, -r6.y, l(1.000000)
mul r1.w, r1.w, r6.y
mul r6.x, r6.x, l(0.500000)
mul r3.x, r3.x, l(5.000000)
min r3.x, r3.x, l(1.000000)
mad r3.x, r3.x, r6.x, r7.z
movc r1.x, r4.x, r7.z, r3.x
ieq r3.x, cb0[2].x, l(0)
or r3.x, r5.z, r3.x
if_nz r3.x
  sample_l_indexable(texture2d)(float,float,float,float) r6.x, r1.xzxx, t8.xyzw, s4, l(0.000000)
else 
  sample_l_indexable(texture2d)(float,float,float,float) r6.x, r1.xzxx, t6.xyzw, s3, l(0.000000)
endif 
ilt r6.y, l(0), cb0[5].x
add r7.x, -r6.x, |r6.x|
mad r1.w, r1.w, r7.x, r6.x
movc r1.w, r6.y, r1.w, r6.x
add r6.x, r7.w, -r8.x
add r3.w, r3.w, -r8.x
add r1.w, r1.w, r3.w
add r1.w, -r1.w, r6.x
min r3.w, r1.w, l(-0.012500)
div r3.w, r6.x, r3.w
add r6.x, -r3.w, l(1.000000)
mul r6.x, r6.x, r7.z
mad r2.z, r2.z, |r3.w|, r6.x
mad r3.w, r4.z, l(0.000145), r2.z
mad r4.z, r1.w, l(0.000436), r3.w
mad r1.w, -r1.w, l(0.000436), r3.w
movc r1.w, r2.x, r4.z, r1.w
movc r1.x, r4.x, r1.w, r2.z
if_z cb0[4].y
  mov r1.y, r1.z
  mul r2.xz, r1.xxyx, -r1.xxyx
  mul r7.xy, r1.xyxx, l(32.000000, 32.000000, 0.000000, 0.000000)
  mad r2.xz, r2.xxzx, l(32.000000, 0.000000, 32.000000, 0.000000), r7.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r1.xyxx, t2.xyzw, s1, l(0.000000)
  add r1.y, cb0[13].y, l(0.000000)
  mad r1.y, r1.y, l(27.000000), l(-0.000000)
  mad r1.w, r2.x, r2.z, l(-0.000000)
  div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
  mul_sat r1.y, r1.y, r1.w
  mad r1.w, r1.y, l(-2.000000), l(3.000000)
  mul r1.y, r1.y, r1.y
  mul r1.y, r1.y, r1.w
  mul r7.xyz, r1.yyyy, r7.xyzx
else 
  sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.xzxx, t6.yxzw, s3, l(0.000000)
  mov r7.xyz, r1.yyyy
endif 
ilt r1.y, l(0), cb0[9].x
if_nz r1.y
  mul r2.xz, cb0[16].xxyx, l(0.000291, 0.000000, 0.000694, 0.000000)
  iadd r1.w, cb0[9].y, l(1)
  itof r1.w, r1.w
  add r3.w, r1.w, l(2.000000)
  mul r4.z, r1.w, r1.w
  ieq r6.x, cb0[15].x, l(0)
  ine r7.w, cb0[9].w, l(0)
  and r6.x, r6.x, r7.w
  movc r2.xz, r6.xxxx, l(0.500000,0,0.500000,0), r2.xxzx
  ieq r8.xyz, cb0[9].xxxx, l(3, 1, 2, 0)
  movc r6.x, r8.x, l(1.600000), l(1.750000)
  mul r9.xy, r1.wwww, l(0.005000, 0.006500, 0.000000, 0.000000)
  div r9.yz, r9.yyxy, r6.xxxx
  add r9.yz, r1.xxxx, -r9.yyzy
  add r9.yz, -r2.xxxx, r9.yyzy
  add r1.x, r1.x, -r2.x
  mul r10.x, r6.x, |r1.x|
  mad r10.zw, -r1.wwww, l(0.000000, 0.000000, 0.006500, 0.005000), r1.zzzz
  add r10.zw, -r2.zzzz, r10.zzzw
  add r1.x, r1.z, -r2.z
  mov r10.y, |r1.x|
  mad r2.xz, r3.wwww, l(0.000250, 0.000000, 0.000250, 0.000000), -r10.xxyx
  max r2.xz, r2.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r11.xy, r1.wwww, l(0.005000, 0.005000, 0.000000, 0.000000), -r10.yxyy
  max r11.xy, r11.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xz, r2.xxzx, r11.xxyx
  add r1.x, r2.x, r2.z
  mad r2.xz, r4.zzzz, l(0.001250, 0.000000, 0.001250, 0.000000), -r10.xxyx
  max r2.xz, r2.xxzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.x, r2.z, r2.x
  mul r11.xy, r6.xxxx, |r9.yzyy|
  mov r11.zw, |r10.zzzw|
  movc r9.yz, r8.xxxx, r11.yywy, r10.xxyx
  mad r10.xy, r1.wwww, l(0.005000, 0.005000, 0.000000, 0.000000), -r9.yzyy
  max r10.xy, r10.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.z, r10.y, r10.x
  ne r2.z, l(0.000000, 0.000000, 0.000000, 0.000000), r2.z
  and r2.z, r2.z, l(0x3f800000)
  mad r9.xy, -r9.yzyy, l(4.000000, 4.000000, 0.000000, 0.000000), r9.xxxx
  max r9.xy, r9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r3.w, r9.y, r9.x
  ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.w
  movc r3.w, r3.w, l(-1.000000), l(-0.000000)
  add r2.z, r2.z, r3.w
  mad r9.xy, r1.wwww, l(0.003500, 0.003500, 0.000000, 0.000000), -r11.xzxx
  max r9.xy, r9.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r1.w, r9.y, r9.x
  ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r1.w
  movc r1.w, r1.w, l(-1.000000), l(-0.000000)
  add r1.w, r1.w, r2.z
  and r1.w, r1.w, r8.x
  movc r1.w, r8.z, r2.x, r1.w
  movc r1.x, r8.y, r1.x, r1.w
  mov x4[0].xyz, l(1.000000,1.000000,1.000000,0)
  mov x4[1].xyz, l(0,0,1.000000,0)
  mov x4[2].xyz, l(0,1.000000,0,0)
  mov x4[3].xyz, l(1.000000,0,0,0)
  mov x4[4].xyz, l(1.000000,0,1.000000,0)
  mov x4[5].xyz, l(0,1.000000,1.000000,0)
  mov x4[6].xyz, l(1.000000,1.000000,0,0)
  mov x4[7].xyz, l(1.000000,0.400000,0.700000,0)
  mov x4[8].xyz, l(1.000000,0.640000,0,0)
  mov x4[9].xyz, l(0.500000,0,0.500000,0)
  mov x4[10].xyz, l(0,0,0,0)
  imax r1.w, cb0[9].z, l(0)
  imin r1.w, r1.w, l(10)
  mov r8.xyz, x4[r1.w + 0].xyzx
else 
  mov r8.xyz, l(0,0,0,0)
  mov r1.x, l(0)
endif 
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
movc r7.xyz, r1.xxxx, r8.xyzx, r7.xyzx
dp3 r1.x, r7.xyzx, l(0.212500, 0.715400, 0.072100, 0.000000)
add r1.w, cb0[13].w, l(1.000000)
mov r7.w, l(1.000000)
add r7.xyzw, -r1.xxxx, r7.xyzw
mad o0.xyzw, r1.wwww, r7.xyzw, r1.xxxx
mov r0.z, r1.z
sample_l_indexable(texture2d)(float,float,float,float) r1.x, r0.wzww, t6.yxzw, s3, l(0.000000)
mov_sat r1.x, r1.x
mad r1.z, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.z
mul r1.z, r0.w, l(3440.000000)
round_ni r1.z, r1.z
if_nz r5.x
  mul r2.x, r4.y, r1.z
  mul r2.z, r2.x, l(0.500000)
  frc r2.z, |r2.z|
  add r2.z, r2.z, r2.z
  lt r2.x, r2.x, l(0.000000)
  movc r2.x, r2.x, -r2.z, r2.z
  add r2.z, r4.y, r1.z
  mul r3.w, r2.z, l(0.500000)
  frc r3.w, |r3.w|
  add r3.w, r3.w, r3.w
  lt r2.z, r2.z, l(0.000000)
  movc r2.z, r2.z, -r3.w, r3.w
  ne r2.xz, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xxzx
  movc r2.z, r2.z, l(1.020000), l(1.025000)
  mov r3.w, x1[r3.y + 0].z
  movc r3.z, r2.x, r3.w, r2.z
endif 
if_nz r5.y
  mov r3.z, x2[r3.y + 0].z
endif 
if_nz r5.z
  mov r3.z, x3[r3.y + 0].x
endif 
add r1.z, r4.y, r1.z
mul r2.x, r1.z, l(0.500000)
frc r2.x, |r2.x|
add r2.x, r2.x, r2.x
lt r1.z, r1.z, l(0.000000)
movc r1.z, r1.z, -r2.x, r2.x
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), r1.z
ge r2.xz, r1.xxxx, l(0.999000, 0.000000, 0.875000, 0.000000)
movc r3.yw, r1.zzzz, l(0,0.500000,0,1.020000), l(0,1.025000,0,0.500000)
movc r1.z, r2.z, r3.w, r3.y
movc r1.z, r2.x, r3.y, r1.z
movc r1.z, r5.w, r1.z, r3.z
mul r1.z, r1.z, |r2.y|
lt r2.x, l(0.998000), r1.x
and r2.x, r2.x, l(0x3f800000)
mad r2.x, r2.x, r4.w, l(20.000000)
movc r2.x, cb0[2].w, l(20.000000), r2.x
max r1.z, r1.z, r2.x
min r1.z, r1.z, l(200.000000)
rcp r1.z, r1.z
lt r2.x, r2.y, l(0.000000)
movc r2.y, r2.x, l(-75.000000), l(75.000000)
mul r2.z, r1.z, r2.w
sample_l_indexable(texture2d)(float,float,float,float) r3.y, r0.wzww, t8.yxzw, s4, l(0.000000)
mul r2.y, r6.z, r2.y
lt r3.z, l(0.000000), r3.y
mul r3.w, r6.w, r2.y
mov r4.y, r0.w
mov r4.z, r3.y
mov r4.w, l(0)
mov r5.x, r3.z
loop 
  breakc_z r5.x
  mad r5.y, -r2.w, r1.z, r4.y
  mad r0.y, -r3.w, l(0.000581), r5.y
  sample_l_indexable(texture2d)(float,float,float,float) r5.z, r0.yzyy, t8.yzxw, s4, l(0.000000)
  add r5.w, r1.z, r4.w
  lt r6.x, r5.w, r5.z
  mov r4.yzw, r5.yyzw
  mov r5.x, r6.x
  continue 
endloop 
mad r2.w, r2.w, r1.z, r4.y
sample_l_indexable(texture2d)(float,float,float,float) r3.y, r0.wzww, t4.xyzw, s2, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r0.wzww, t16.xyzw, s2, l(1.400000)
add r0.w, -r0.w, l(1.000000)
add r0.w, -r3.y, r0.w
add r0.w, -r0.w, l(1.000000)
add r3.y, -r3.y, l(1.000000)
mul r0.w, r0.w, r3.y
mul r2.z, r2.z, l(0.500000)
mul r1.x, r1.x, l(5.000000)
min r1.x, r1.x, l(1.000000)
mad r1.x, r1.x, r2.z, r4.y
movc r0.x, r4.x, r4.y, r1.x
if_nz r3.x
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r0.xzxx, t8.xyzw, s4, l(0.000000)
else 
  sample_l_indexable(texture2d)(float,float,float,float) r1.x, r0.xzxx, t6.xyzw, s3, l(0.000000)
endif 
add r2.z, -r1.x, |r1.x|
mad r0.w, r0.w, r2.z, r1.x
movc r0.w, r6.y, r0.w, r1.x
add r1.x, -r4.w, r4.z
add r1.z, r1.z, -r4.w
add r0.w, r0.w, r1.z
add r0.w, -r0.w, r1.x
min r1.z, r0.w, l(-0.012500)
div r1.x, r1.x, r1.z
add r1.z, -r1.x, l(1.000000)
mul r1.z, r1.z, r4.y
mad r1.x, r2.w, |r1.x|, r1.z
mad r1.z, r2.y, l(0.000145), r1.x
mad r2.y, r0.w, l(0.000436), r1.z
mad r0.w, -r0.w, l(0.000436), r1.z
movc r0.w, r2.x, r2.y, r0.w
movc r0.x, r4.x, r0.w, r1.x
if_z cb0[4].y
  mov r0.y, r0.z
  mul r1.xz, r0.xxyx, -r0.xxyx
  mul r2.xy, r0.xyxx, l(32.000000, 32.000000, 0.000000, 0.000000)
  mad r1.xz, r1.xxzx, l(32.000000, 0.000000, 32.000000, 0.000000), r2.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t2.xyzw, s1, l(0.000000)
  add r0.y, cb0[13].y, l(0.000000)
  mad r0.y, r0.y, l(27.000000), l(-0.000000)
  mad r0.w, r1.x, r1.z, l(-0.000000)
  div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
  mul_sat r0.y, r0.y, r0.w
  mad r0.w, r0.y, l(-2.000000), l(3.000000)
  mul r0.y, r0.y, r0.y
  mul r0.y, r0.y, r0.w
  mul r2.xyz, r0.yyyy, r2.xyzx
else 
  sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.xzxx, t6.yxzw, s3, l(0.000000)
  mov r2.xyz, r0.yyyy
endif 
if_nz r1.y
  mul r0.yw, cb0[16].xxxy, l(0.000000, 0.000291, 0.000000, 0.000694)
  iadd r1.x, cb0[9].y, l(1)
  itof r1.x, r1.x
  add r1.y, r1.x, l(2.000000)
  mul r1.z, r1.x, r1.x
  ieq r2.w, cb0[15].x, l(0)
  ine r3.x, cb0[9].w, l(0)
  and r2.w, r2.w, r3.x
  movc r0.yw, r2.wwww, l(0,0.500000,0,0.500000), r0.yyyw
  ieq r3.xyz, cb0[9].xxxx, l(3, 1, 2, 0)
  movc r2.w, r3.x, l(1.600000), l(1.750000)
  mul r4.xy, r1.xxxx, l(0.005000, 0.006500, 0.000000, 0.000000)
  div r4.yz, r4.yyxy, r2.wwww
  add r4.yz, r0.xxxx, -r4.yyzy
  add r4.yz, -r0.yyyy, r4.yyzy
  add r0.x, -r0.y, r0.x
  mul r0.x, r2.w, |r0.x|
  mad r5.xy, -r1.xxxx, l(0.006500, 0.005000, 0.000000, 0.000000), r0.zzzz
  add r5.xy, -r0.wwww, r5.xyxx
  add r0.z, -r0.w, r0.z
  mov r0.y, |r0.z|
  mad r0.zw, r1.yyyy, l(0.000000, 0.000000, 0.000250, 0.000250), -r0.xxxy
  max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r5.zw, r1.xxxx, l(0.000000, 0.000000, 0.005000, 0.005000), -r0.yyyx
  max r5.zw, r5.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r0.zw, r0.zzzw, r5.zzzw
  add r0.z, r0.z, r0.w
  mad r1.yz, r1.zzzz, l(0.000000, 0.001250, 0.001250, 0.000000), -r0.xxyx
  max r1.yz, r1.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r0.w, r1.z, r1.y
  mul r6.xy, r2.wwww, |r4.yzyy|
  mov r6.zw, |r5.xxxy|
  movc r0.xy, r3.xxxx, r6.ywyy, r0.xyxx
  mad r1.yz, r1.xxxx, l(0.000000, 0.005000, 0.005000, 0.000000), -r0.xxyx
  max r1.yz, r1.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r1.y, r1.z, r1.y
  ne r1.y, l(0.000000, 0.000000, 0.000000, 0.000000), r1.y
  and r1.y, r1.y, l(0x3f800000)
  mad r0.xy, -r0.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000), r4.xxxx
  max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r0.x, r0.y, r0.x
  ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
  movc r0.x, r0.x, l(-1.000000), l(-0.000000)
  add r0.x, r0.x, r1.y
  mad r1.xy, r1.xxxx, l(0.003500, 0.003500, 0.000000, 0.000000), -r6.xzxx
  max r1.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r0.y, r1.y, r1.x
  ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.y
  movc r0.y, r0.y, l(-1.000000), l(-0.000000)
  add r0.x, r0.y, r0.x
  and r0.x, r0.x, r3.x
  movc r0.x, r3.z, r0.w, r0.x
  movc r0.x, r3.y, r0.z, r0.x
  mov x5[0].xyz, l(1.000000,1.000000,1.000000,0)
  mov x5[1].xyz, l(0,0,1.000000,0)
  mov x5[2].xyz, l(0,1.000000,0,0)
  mov x5[3].xyz, l(1.000000,0,0,0)
  mov x5[4].xyz, l(1.000000,0,1.000000,0)
  mov x5[5].xyz, l(0,1.000000,1.000000,0)
  mov x5[6].xyz, l(1.000000,1.000000,0,0)
  mov x5[7].xyz, l(1.000000,0.400000,0.700000,0)
  mov x5[8].xyz, l(1.000000,0.640000,0,0)
  mov x5[9].xyz, l(0.500000,0,0.500000,0)
  mov x5[10].xyz, l(0,0,0,0)
  imax r0.y, cb0[9].z, l(0)
  imin r0.y, r0.y, l(10)
  mov r0.yzw, x5[r0.y + 0].xxyz
else 
  mov r0.xyzw, l(0,0,0,0)
endif 
ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
movc r0.xyz, r0.xxxx, r0.yzwy, r2.xyzx
dp3 r1.x, r0.xyzx, l(0.212500, 0.715400, 0.072100, 0.000000)
mov r0.w, l(1.000000)
add r0.xyzw, r0.xyzw, -r1.xxxx
mad o1.xyzw, r1.wwww, r0.xyzw, r1.xxxx
ret 
// Approximately 471 instruction slots used
