//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float fMXAOAmbientOcclusionAmount; // Offset:    0 Size:     4 [unused]
//   float fMXAOSampleRadius;           // Offset:    4 Size:     4 [unused]
//   float iMXAOSampleCount;            // Offset:    8 Size:     4 [unused]
//   float iMXAOBayerDitherLevel;       // Offset:   12 Size:     4 [unused]
//   float fMXAONormalBias;             // Offset:   16 Size:     4 [unused]
//   bool bMXAOSmoothNormalsEnable;     // Offset:   20 Size:     4 [unused]
//   float fMXAOBlurSharpness;          // Offset:   24 Size:     4
//   float fMXAOBlurSteps;              // Offset:   28 Size:     4
//   bool bMXAODebugViewEnable;         // Offset:   32 Size:     4 [unused]
//   float fMXAOFadeoutStart;           // Offset:   36 Size:     4 [unused]
//   float fMXAOFadeoutEnd;             // Offset:   40 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V__texDistance                  texture  float4          2d             t6      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t6.xyzw, s0, l(0.000000)
mul r0.w, r0.w, l(0.500000)
mad r2.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mov r2.z, l(1.000000)
mul r1.yzw, r1.xxxx, r2.xxyz
dp3 r2.x, r1.yzwy, r1.yzwy
rsq r2.x, r2.x
mul r1.yzw, r1.yyzw, r2.xxxx
dp3 r1.y, r0.xyzx, r1.yzwy
mov_sat r1.y, -r1.y
round_z r1.z, cb0[1].w
ge r1.w, r1.z, l(1.000000)
dp3 r2.x, r0.xyzx, r0.xyzx
rsq r2.x, r2.x
mul r2.xyz, r0.xyzx, r2.xxxx
mov r3.y, r0.w
mov r2.w, l(-1)
mov r3.xz, l(0.500000,0,-1,0)
loop 
  breakc_z r3.z
  itof r3.w, r2.w
  mov r4.xy, r3.xyxx
  mov r4.z, l(1.000000)
  mov r4.w, r1.w
  loop 
    breakc_z r4.w
    mad r5.x, r4.z, l(2.000000), l(-0.500000)
    mul r5.x, r3.w, r5.x
    mad r5.xy, r5.xxxx, l(0.000291, 0.000000, 0.000000, 0.000000), v1.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)
    mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t6.xyzw, s0, l(0.000000)
    add r5.x, -r1.x, r5.x
    dp3 r5.y, r6.xyzx, r6.xyzx
    rsq r5.y, r5.y
    mul r5.yzw, r5.yyyy, r6.xxyz
    dp3_sat r5.y, r5.yzwy, r2.xyzx
    add r5.y, -r5.y, l(1.000000)
    mul r5.x, |r5.x|, cb0[1].z
    mul r5.x, r1.y, r5.x
    mul r5.x, r5.x, l(5.000000)
    rcp r5.x, r5.x
    mul r5.y, r5.y, cb0[1].z
    mul r5.y, r5.y, l(10.000000)
    rcp r5.y, r5.y
    mov_sat r5.xy, r5.xyxx
    min r5.x, r5.x, r5.y
    mad r4.y, r6.w, r5.x, r4.y
    add r4.x, r4.x, r5.x
    add r4.z, r4.z, l(1.000000)
    ge r4.w, r1.z, r4.z
  endloop 
  mov r3.xy, r4.xyxx
  iadd r2.w, r2.w, l(2)
  ige r3.z, l(1), r2.w
endloop 
mad o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
div o0.w, r3.y, r3.x
ret 
// Approximately 61 instruction slots used
