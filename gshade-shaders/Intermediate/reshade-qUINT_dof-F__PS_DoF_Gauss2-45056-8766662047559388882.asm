//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool bADOF_AutofocusEnable;        // Offset:    0 Size:     4 [unused]
//   float2 fADOF_AutofocusCenter;      // Offset:    4 Size:     8 [unused]
//   float fADOF_AutofocusRadius;       // Offset:   12 Size:     4 [unused]
//   float fADOF_AutofocusSpeed;        // Offset:   16 Size:     4 [unused]
//   float fADOF_ManualfocusDepth;      // Offset:   20 Size:     4 [unused]
//   float fADOF_NearBlurCurve;         // Offset:   24 Size:     4 [unused]
//   float fADOF_FarBlurCurve;          // Offset:   28 Size:     4 [unused]
//   float fADOF_HyperFocus;            // Offset:   32 Size:     4 [unused]
//   float fADOF_RenderResolutionMult;  // Offset:   36 Size:     4 [unused]
//   float fADOF_ShapeRadius;           // Offset:   40 Size:     4 [unused]
//   float fADOF_SmootheningAmount;     // Offset:   44 Size:     4
//   float fADOF_BokehIntensity;        // Offset:   48 Size:     4 [unused]
//   int iADOF_BokehMode;               // Offset:   52 Size:     4 [unused]
//   int iADOF_ShapeVertices;           // Offset:   56 Size:     4 [unused]
//   int iADOF_ShapeQuality;            // Offset:   60 Size:     4 [unused]
//   float fADOF_ShapeCurvatureAmount;  // Offset:   64 Size:     4 [unused]
//   float fADOF_ShapeRotation;         // Offset:   68 Size:     4 [unused]
//   float fADOF_ShapeAnamorphRatio;    // Offset:   72 Size:     4 [unused]
//   float fADOF_ShapeChromaAmount;     // Offset:   76 Size:     4 [unused]
//   int iADOF_ShapeChromaMode;         // Offset:   80 Size:     4 [unused]
//   float FRAME_TIME;                  // Offset:   84 Size:     4 [unused]
//   int FRAME_COUNT;                   // Offset:   88 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__CommonTex1                   texture  float4          2d            t10      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xy          3     NONE   float       
// TEXCOORD                 3   xy          4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t10.xyzw, s0
mad r1.x, r0.w, l(2.000000), l(-1.000000)
mul r1.y, |r1.x|, cb0[2].w
round_ni r1.y, r1.y
min r1.y, r1.y, l(50.000000)
mad r1.z, r1.y, r1.y, l(0.001000)
rcp r1.z, r1.z
mul r1.z, r1.z, l(-2.000000)
ge r1.w, r1.y, -r1.y
mov r2.xyzw, l(0,0,0,0.001000)
mov r3.x, -r1.y
mov r3.y, r1.w
loop 
  breakc_z r3.y
  mul r3.z, r3.x, r3.x
  mul r3.z, r1.z, r3.z
  mul r3.z, r3.z, l(1.442695)
  exp r3.z, r3.z
  mad r3.w, r3.x, l(2.000000), l(-0.500000)
  mad r4.xy, r3.wwww, l(0.000000, 0.000694, 0.000000, 0.000000), v1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.xyxx, t10.xyzw, s0, l(0.000000)
  mad r3.w, r4.w, l(2.000000), l(-1.000000)
  mad_sat r3.w, -|r1.x|, l(0.250000), |r3.w|
  mul r4.w, r3.w, r3.z
  mad r2.xyz, r4.xyzx, r4.wwww, r2.xyzx
  mad r2.w, r3.z, r3.w, r2.w
  add r3.x, r3.x, l(1.000000)
  ge r3.y, r1.y, r3.x
endloop 
div r1.xyz, r2.xyzx, r2.wwww
mov_sat r2.w, r2.w
add r1.xyz, -r0.xyzx, r1.xyzx
mad o0.xyz, r2.wwww, r1.xyzx, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 35 instruction slots used
