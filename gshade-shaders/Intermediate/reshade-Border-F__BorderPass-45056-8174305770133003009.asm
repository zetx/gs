//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float2 border_width;               // Offset:    0 Size:     8
//   float border_ratio;                // Offset:    8 Size:     4
//   float4 border_color;               // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyz         0   TARGET   float   xyz 
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyz
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
eq r0.w, -cb0[0].y, cb0[0].x
lt r1.x, l(2.388889), cb0[0].z
div r1.y, l(3440.000000), cb0[0].z
add r1.y, -r1.y, l(1440.000000)
mul r2.y, r1.y, l(0.500000)
mad r2.z, cb0[0].z, l(-720.000000), l(1720.000000)
mov r2.xw, l(0,0,0,0)
movc r1.xy, r1.xxxx, r2.xyxx, r2.zwzz
movc r1.xy, r0.wwww, r1.xyxx, cb0[0].xyxx
mul r1.xy, r1.xyxx, l(0.000291, 0.000694, 0.000000, 0.000000)
mad r1.zw, -v1.xxxy, v1.xxxy, v1.xxxy
mad r1.xy, -r1.xyxx, r1.xyxx, r1.xyxx
add_sat r1.xy, -r1.xyxx, r1.zwzz
ne r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyxx
and r0.w, r1.y, r1.x
if_nz r0.w
  mov o0.xyz, r0.xyzx
  ret 
else 
  add r1.xyz, -r0.xyzx, cb0[1].xyzx
  mad o0.xyz, cb0[1].wwww, r1.xyzx, r0.xyzx
  ret 
endif 
ret 
// Approximately 25 instruction slots used
