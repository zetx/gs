//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float screenLinesNum;              // Offset:    0 Size:     4
//   bool VHS_Bleed;                    // Offset:    4 Size:     4 [unused]
//   int VHS_BleedMode;                 // Offset:    8 Size:     4 [unused]
//   float bleedAmount;                 // Offset:   12 Size:     4 [unused]
//   bool VHS_FishEye;                  // Offset:   16 Size:     4
//   bool VHS_FishEye_Hyperspace;       // Offset:   20 Size:     4 [unused]
//   float fisheyeBend;                 // Offset:   24 Size:     4 [unused]
//   float cutoffX;                     // Offset:   28 Size:     4
//   float cutoffY;                     // Offset:   32 Size:     4
//   float cutoffFadeX;                 // Offset:   36 Size:     4
//   float cutoffFadeY;                 // Offset:   40 Size:     4
//   bool VHS_Vignette;                 // Offset:   44 Size:     4 [unused]
//   float vignetteAmount;              // Offset:   48 Size:     4 [unused]
//   float vignetteSpeed;               // Offset:   52 Size:     4 [unused]
//   float noiseLinesNum;               // Offset:   56 Size:     4
//   float noiseQuantizeX;              // Offset:   60 Size:     4
//   bool VHS_FilmGrain;                // Offset:   64 Size:     4
//   float filmGrainAmount;             // Offset:   68 Size:     4 [unused]
//   bool VHS_YIQNoise;                 // Offset:   72 Size:     4
//   int signalNoiseType;               // Offset:   76 Size:     4
//   float signalNoiseAmount;           // Offset:   80 Size:     4
//   float signalNoisePower;            // Offset:   84 Size:     4
//   bool VHS_LineNoise;                // Offset:   88 Size:     4
//   float lineNoiseAmount;             // Offset:   92 Size:     4 [unused]
//   float lineNoiseSpeed;              // Offset:   96 Size:     4 [unused]
//   bool VHS_TapeNoise;                // Offset:  100 Size:     4
//   float tapeNoiseTH;                 // Offset:  104 Size:     4 [unused]
//   float tapeNoiseAmount;             // Offset:  108 Size:     4
//   float tapeNoiseSpeed;              // Offset:  112 Size:     4 [unused]
//   bool VHS_ScanLines;                // Offset:  116 Size:     4
//   float scanLineWidth;               // Offset:  120 Size:     4
//   bool VHS_LinesFloat;               // Offset:  124 Size:     4
//   float linesFloatSpeed;             // Offset:  128 Size:     4
//   bool VHS_Stretch;                  // Offset:  132 Size:     4
//   bool VHS_Jitter_H;                 // Offset:  136 Size:     4
//   float jitterHAmount;               // Offset:  140 Size:     4
//   bool VHS_Jitter_V;                 // Offset:  144 Size:     4
//   float jitterVAmount;               // Offset:  148 Size:     4
//   float jitterVSpeed;                // Offset:  152 Size:     4
//   bool VHS_Twitch_H;                 // Offset:  156 Size:     4
//   float twitchHFreq;                 // Offset:  160 Size:     4
//   bool VHS_Twitch_V;                 // Offset:  164 Size:     4
//   float twitchVFreq;                 // Offset:  168 Size:     4
//   bool VHS_SignalTweak;              // Offset:  172 Size:     4 [unused]
//   float signalAdjustY;               // Offset:  176 Size:     4 [unused]
//   float signalAdjustI;               // Offset:  180 Size:     4 [unused]
//   float signalAdjustQ;               // Offset:  184 Size:     4 [unused]
//   float signalShiftY;                // Offset:  188 Size:     4 [unused]
//   float signalShiftI;                // Offset:  192 Size:     4 [unused]
//   float signalShiftQ;                // Offset:  196 Size:     4 [unused]
//   float gammaCorection;              // Offset:  200 Size:     4 [unused]
//   bool VHS_Feedback;                 // Offset:  204 Size:     4 [unused]
//   float feedbackAmount;              // Offset:  208 Size:     4 [unused]
//   float feedbackFade;                // Offset:  212 Size:     4 [unused]
//   float feedbackThresh;              // Offset:  216 Size:     4 [unused]
//   float3 feedbackColor;              // Offset:  224 Size:    12 [unused]
//   bool feedbackDebug;                // Offset:  236 Size:     4 [unused]
//   int VHS_Filter;                    // Offset:  240 Size:     4 [unused]
//   float Timer;                       // Offset:  244 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// __V___TapeTex                     texture  float4          2d            t12      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 7
add r0.x, cb0[0].x, l(0.500000)
add r0.y, cb0[3].z, l(0.500000)
eq r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.z, r0.z, l(1440.000000), r0.x
lt r1.x, r0.z, r0.y
or r0.w, r0.w, r1.x
movc r0.y, r0.w, r0.z, r0.y
mul r1.xy, cb0[10].zxzz, l(0.500000, 0.100000, 0.000000, 0.000000)
mul r2.xyzw, cb0[15].yyyy, l(0.001000, 0.003000, 0.020000, 0.200000)
sincos null, r1.zw, r2.yyyx
mad r0.w, r1.x, r1.z, r2.x
sincos r0.w, null, r0.w
ge r0.w, r0.w, l(0.900000)
and r0.w, r0.w, l(0x3ecccccd)
sincos r2.yzw, null, r2.xxzw
mul r1.x, r2.w, l(0.100000)
mul r1.x, r1.w, r1.x
mad r1.x, r2.y, r2.z, r1.x
add r1.x, r1.x, l(0.500000)
mad r0.w, r0.w, r1.x, v1.y
frc r1.x, |r0.w|
lt r0.w, r0.w, l(0.000000)
movc r0.w, r0.w, -r1.x, r1.x
movc r0.w, cb0[10].y, r0.w, v1.y
mad r1.x, r0.w, l(10.000000), r2.x
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(0.020000)
mul r3.xyzw, cb0[15].yyyy, l(0.004000, 0.080000, 0.000250, 13.000001)
sincos null, r1.zw, r3.xxxy
mad r1.y, r1.y, r1.z, r2.x
sincos r1.y, null, r1.y
ge r1.y, r1.y, l(0.300000)
and r1.y, r1.y, l(0x3f800000)
mul r1.x, r1.y, r1.x
add r1.y, r1.w, l(1.000000)
mul r1.x, r1.y, r1.x
frc r1.y, |r3.z|
lt r1.z, cb0[15].y, l(0.000000)
movc r1.y, r1.z, -r1.y, r1.y
add r1.y, r0.w, -r1.y
mul r1.y, r1.y, r1.y
mad r1.y, r1.y, l(20.000000), l(1.000000)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mad r1.x, r1.x, r1.y, v1.x
movc r1.x, cb0[9].w, r1.x, v1.x
mul r1.y, -r2.x, cb0[8].x
frc r1.y, r1.y
mul r1.w, r0.z, -r0.w
mad r0.w, -r0.w, r0.z, r1.y
round_ni r0.w, r0.w
div r0.w, -r0.w, r0.z
div r1.y, r1.y, r0.z
add r0.w, r0.w, r1.y
round_ni r1.y, r1.w
div r1.y, -r1.y, r0.z
movc r4.z, cb0[7].w, r0.w, r1.y
if_nz cb0[8].y
  mul r2.yzw, cb0[15].yyyy, l(0.000000, 0.002000, 0.000500, 0.002400)
  frc r1.yw, |r2.yyyw|
  mul r1.yw, r1.yyyw, l(0.000000, 0.500000, 0.000000, 0.500000)
  movc r1.yw, r1.zzzz, -r1.yyyw, r1.yyyw
  mad r0.w, cb0[15].y, l(0.001000), -r1.y
  frc r1.y, r0.w
  add r2.y, -r1.y, l(1.000000)
  add r2.y, r2.y, r2.y
  add r2.w, -r0.w, l(3.141593)
  mul r3.x, r4.z, l(6.283185)
  mad r2.y, r3.x, r2.y, r2.w
  sincos null, r2.y, r2.y
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r2.y, l(0.500000)
  mad r0.w, r3.x, r1.y, r0.w
  sincos null, r0.w, r0.w
  add r0.w, r0.w, l(1.000000)
  mul r0.w, r0.w, l(0.500000)
  max r0.w, r0.w, l(0.500000)
  mul r0.w, r0.w, r2.y
  mul r0.w, r0.w, l(15.000000)
  round_ni r0.w, r0.w
  mul r1.y, r0.w, l(1.000000)
  frc r2.y, r2.z
  add r2.y, -r2.y, l(1.000000)
  mul r2.z, r0.x, r2.y
  frc r2.z, r2.z
  mad r2.y, r2.y, r0.x, -r2.z
  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  div r2.w, r2.y, r1.y
  frc r2.w, |r2.w|
  mul r2.w, r1.y, r2.w
  lt r3.x, r2.y, l(0.000000)
  movc r2.w, r3.x, -r2.w, r2.w
  div r2.w, r2.w, r1.y
  add r3.x, -r2.w, l(1.000000)
  div r1.y, r0.x, r1.y
  mul r3.y, r2.y, r2.z
  lt r3.y, r4.z, r3.y
  mad r0.w, -r0.w, l(1.000000), r2.y
  mul r0.w, r0.w, r2.z
  lt r0.w, r0.w, r4.z
  and r0.w, r0.w, r3.y
  mad r2.y, r4.z, r1.y, r3.x
  round_ni r2.y, r2.y
  div r2.y, r2.y, r1.y
  div r1.y, -r2.w, r1.y
  add r1.y, -r1.y, r2.y
  movc r0.w, r0.w, r1.y, r4.z
  mad r1.y, cb0[15].y, l(0.001200), -r1.w
  frc r1.w, r1.y
  add r2.yw, -r1.wwwy, l(0.000000, 1.000000, 0.000000, 3.141593)
  add r2.y, r2.y, r2.y
  mul r3.x, r0.w, l(6.283185)
  mad r2.y, r3.x, r2.y, r2.w
  sincos null, r2.y, r2.y
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r2.y, l(0.500000)
  mad r1.y, r3.x, r1.w, r1.y
  sincos null, r1.y, r1.y
  add r1.y, r1.y, l(1.000000)
  mul r1.y, r1.y, l(0.500000)
  max r1.y, r1.y, l(0.500000)
  mul r1.y, r1.y, r2.y
  mul r1.y, r1.y, l(8.000000)
  round_ni r1.y, r1.y
  mul r1.w, r1.y, l(1.000000)
  mad r2.yw, cb0[15].yyyy, l(0.000000, 0.000450, 0.000000, -0.000350), l(0.000000, 0.500000, 0.000000, 0.250000)
  frc r2.yw, r2.yyyw
  add r2.yw, -r2.yyyw, l(0.000000, 1.000000, 0.000000, 1.000000)
  mul r3.xy, r0.xxxx, r2.ywyy
  frc r3.xy, r3.xyxx
  mad r2.yw, r2.yyyw, r0.xxxx, -r3.xxxy
  div r3.x, r2.y, r1.w
  frc r3.x, |r3.x|
  mul r3.x, r1.w, r3.x
  lt r3.yz, r2.yywy, l(0.000000, 0.000000, 0.000000, 0.000000)
  movc r3.x, r3.y, -r3.x, r3.x
  div r3.x, r3.x, r1.w
  add r3.y, -r3.x, l(1.000000)
  div r1.w, r0.x, r1.w
  mul r5.xy, r2.ywyy, r2.zzzz
  lt r5.x, r0.w, r5.x
  mad r1.y, -r1.y, l(1.000000), r2.y
  mul r1.y, r1.y, r2.z
  lt r1.y, r1.y, r0.w
  and r1.y, r1.y, r5.x
  mad r2.y, r0.w, r1.w, r3.y
  round_ni r2.y, r2.y
  div r2.y, r2.y, r1.w
  div r1.w, -r3.x, r1.w
  add r1.w, -r1.w, r2.y
  movc r0.w, r1.y, r1.w, r0.w
  frc r1.y, |r2.x|
  mul r1.y, r1.y, l(0.500000)
  movc r1.y, r1.z, -r1.y, r1.y
  mad r1.y, cb0[15].y, l(0.000500), -r1.y
  frc r1.z, r1.y
  add r1.w, -r1.z, l(1.000000)
  add r1.w, r1.w, r1.w
  add r2.y, -r1.y, l(3.141593)
  mul r3.x, r0.w, l(6.283185)
  mad r1.w, r3.x, r1.w, r2.y
  sincos null, r1.w, r1.w
  add r1.w, r1.w, l(1.000000)
  mad r1.y, r3.x, r1.z, r1.y
  sincos null, r1.y, r1.y
  add r1.y, r1.y, l(1.000000)
  mul r1.yw, r1.yyyw, l(0.000000, 0.500000, 0.000000, 0.500000)
  max r1.y, r1.y, l(0.500000)
  mul r1.y, r1.y, r1.w
  mul r1.y, r1.y, l(11.000000)
  round_ni r1.y, r1.y
  mul r1.z, r1.y, l(1.000000)
  div r1.w, r2.w, r1.z
  frc r1.w, |r1.w|
  mul r1.w, r1.z, r1.w
  movc r1.w, r3.z, -r1.w, r1.w
  div r1.w, r1.w, r1.z
  add r2.y, -r1.w, l(1.000000)
  div r0.x, r0.x, r1.z
  lt r1.z, r0.w, r5.y
  mad r1.y, -r1.y, l(1.000000), r2.w
  mul r1.y, r1.y, r2.z
  lt r1.y, r1.y, r0.w
  and r1.y, r1.y, r1.z
  mad r1.z, r0.w, r0.x, r2.y
  round_ni r1.z, r1.z
  div r1.z, r1.z, r0.x
  div r0.x, -r1.w, r0.x
  add r0.x, -r0.x, r1.z
  movc r4.z, r1.y, r0.x, r0.w
endif 
mul r0.x, r0.z, r4.z
mul r0.w, r0.x, l(0.500000)
frc r0.w, |r0.w|
add r0.w, r0.w, r0.w
lt r0.x, r0.x, l(0.000000)
movc r0.x, r0.x, -r0.w, r0.w
lt r0.x, r0.x, l(1.000000)
sincos r0.w, null, r3.w
mul r0.w, r0.w, cb0[8].w
mad r0.w, r0.w, l(0.000291), r1.x
movc r0.x, r0.x, r0.w, r1.x
movc r1.x, cb0[8].z, r0.x, r1.x
ne r0.x, r0.y, r0.z
frc r0.z, r2.x
mul r0.w, r0.y, r4.z
mad r1.w, r4.z, r0.y, r0.z
round_ni r1.w, r1.w
div r1.w, r1.w, r0.y
div r2.y, r0.z, r0.y
add r1.w, r1.w, -r2.y
round_ni r0.w, r0.w
div r0.w, r0.w, r0.y
movc r0.w, cb0[5].z, r1.w, r0.w
movc r3.z, r0.x, r0.w, r4.z
mul r0.x, r0.y, l(2.388889)
mad r0.y, -r0.y, l(2.388889), l(3440.000000)
mad r0.x, cb0[3].w, r0.y, r0.x
mul r0.y, r0.x, r1.x
round_ni r0.y, r0.y
div r3.y, r0.y, r0.x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
if_nz cb0[6].y
  mov r5.x, l(0)
  mov r0.w, r1.x
  mov r0.y, l(0)
  mov r1.w, l(0)
  mov r2.y, l(-1)
  loop 
    breakc_z r2.y
    itof r2.z, r1.w
    mad r5.y, -r0.x, r2.z, r3.z
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t12.xzwy, s1, l(0.000000)
    lt r2.w, l(0.550000), r2.w
    mul r2.z, r2.z, l(0.157080)
    sincos r2.z, null, r2.z
    round_z r3.w, r2.z
    mul r3.w, r0.x, r3.w
    mad r6.x, -r3.w, l(4.000000), r0.w
    add r6.y, r0.y, r2.z
    movc r0.yw, r2.wwww, r6.yyyx, r0.yyyw
    iadd r1.w, r1.w, l(1)
    ilt r2.y, r1.w, l(20)
  endloop 
  mov r1.x, r0.w
else 
  mov r0.y, l(0)
endif 
if_nz cb0[9].x
  mul r0.w, r2.x, cb0[9].z
  mul r1.w, cb0[9].y, l(0.000100)
  mul r5.xyzw, r0.wwww, l(0.030000, 0.200000, 0.004000, 9.000000)
  mul r6.xy, r4.zzzz, l(0.420000, 0.002000, 0.000000, 0.000000)
  mov r6.zw, r5.xxxz
  dp2 r0.w, r6.zxzz, l(12.989800, 78.233002, 0.000000, 0.000000)
  mul r2.y, r0.w, l(0.318471)
  frc r2.y, |r2.y|
  mul r2.y, r2.y, l(3.140000)
  lt r0.w, r0.w, l(0.000000)
  movc r0.w, r0.w, -r2.y, r2.y
  sincos r0.w, null, r0.w
  mul r0.w, r0.w, l(43758.542969)
  frc r0.w, r0.w
  mov r4.w, r5.y
  dp2 r2.y, r4.wzww, l(12.989800, 78.233002, 0.000000, 0.000000)
  mul r2.z, r2.y, l(0.318471)
  frc r2.z, |r2.z|
  mul r2.z, r2.z, l(3.140000)
  lt r2.y, r2.y, l(0.000000)
  movc r2.y, r2.y, -r2.z, r2.z
  sincos r2.y, null, r2.y
  mul r2.y, r2.y, l(43758.542969)
  frc r2.y, r2.y
  sincos r2.y, null, r2.y
  mul r2.y, r1.w, r2.y
  mad r0.w, r0.w, l(0.001000), r2.y
  add r4.y, r0.w, r1.x
  dp2 r0.w, r6.wyww, l(12.989800, 78.233002, 0.000000, 0.000000)
  mul r2.y, r0.w, l(0.318471)
  frc r2.y, |r2.y|
  mul r2.y, r2.y, l(3.140000)
  lt r0.w, r0.w, l(0.000000)
  movc r0.w, r0.w, -r2.y, r2.y
  sincos r0.w, null, r0.w
  mul r0.w, r0.w, l(43758.542969)
  frc r0.w, r0.w
  sincos r2.y, null, r5.w
  mul r1.w, r1.w, r2.y
  mad r0.w, r0.w, l(0.004000), r1.w
  add r4.x, r0.w, r1.x
  sample_indexable(texture2d)(float,float,float,float) r2.yzw, r4.yzyy, t0.wxyz, s1
  dp3 r5.x, r2.yzwy, l(0.298900, 0.595900, 0.211500, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r2.yzw, r4.xzxx, t0.wxyz, s1
  mul r0.w, r2.z, l(0.274400)
  mad r0.w, r2.y, l(0.587000), -r0.w
  mad r6.y, -r2.w, l(0.522900), r0.w
  mov r1.y, r4.z
  sample_indexable(texture2d)(float,float,float,float) r2.yzw, r1.xyxx, t0.wxyz, s1
  mul r0.w, r2.z, l(0.321600)
  mad r0.w, r2.y, l(0.114000), -r0.w
  mad r6.z, r2.w, l(0.311400), r0.w
else 
  mov r1.z, r4.z
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xzxx, t0.xyzw, s1
  dp3 r5.x, r1.xyzx, l(0.298900, 0.595900, 0.211500, 0.000000)
  mul r0.w, r1.y, l(0.274400)
  mad r0.w, r1.x, l(0.587000), -r0.w
  mad r6.y, -r1.z, l(0.522900), r0.w
  mul r0.w, r1.y, l(0.321600)
  mad r0.w, r1.x, l(0.114000), -r0.w
  mad r6.z, r1.z, l(0.311400), r0.w
endif 
or r0.w, cb0[4].x, cb0[5].z
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r0.w, r3.yzyy, t12.xywz, s1
  add r5.x, r0.w, r5.x
endif 
if_nz cb0[4].z
  mul r1.xyz, r3.yzyy, l(3440.000000, 1440.000000, 3440.000000, 0.000000)
  if_z cb0[4].w
    add r0.w, -cb0[5].y, l(1.000000)
    mad r2.yzw, r0.zzzz, l(0.000000, 0.070000, 0.070000, 0.070000), r1.zzyz
    mul r2.yzw, r2.yyzw, l(0.000000, 443.897491, 397.297302, 491.187103)
    frc r2.yzw, r2.yyzw
    add r4.xyz, r2.zwyz, l(19.190001, 19.190001, 19.190001, 0.000000)
    dp3 r1.w, r2.wyzw, r4.xyzx
    add r2.yzw, r1.wwww, r2.yyzw
    add r4.xy, r2.zwzz, r2.yyyy
    mul r2.yz, r2.wwzw, r4.xxyx
    frc r2.yz, r2.yyzy
    mul r0.w, r0.w, l(10.000000)
    div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
    log r2.yz, r2.yyzy
    mul r2.yz, r0.wwww, r2.yyzy
    exp r2.yz, r2.yyzy
    mad r2.yz, r2.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
    mul r2.yz, r2.yyzy, cb0[5].xxxx
    mad r6.yz, r2.yyzy, r5.xxxx, r6.yyzy
    mov r6.x, r5.x
  else 
    ieq r0.w, cb0[4].w, l(1)
    add r1.w, -cb0[5].y, l(1.000000)
    mad r1.xyz, r0.zzzz, l(0.070000, 0.070000, 0.070000, 0.000000), r1.xyzx
    mul r1.xyz, r1.xyzx, l(443.897491, 397.297302, 491.187103, 0.000000)
    frc r1.xyz, r1.xyzx
    add r2.yzw, r1.yyzx, l(0.000000, 19.190001, 19.190001, 19.190001)
    dp3 r0.z, r1.zxyz, r2.yzwy
    add r1.xyz, r0.zzzz, r1.xyzx
    add r2.yz, r1.yyzy, r1.xxxx
    mul r1.xy, r1.zyzz, r2.yzyy
    frc r1.xy, r1.xyxx
    mul r0.z, r1.w, l(10.000000)
    div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
    log r1.xy, r1.xyxx
    mul r1.xy, r0.zzzz, r1.xyxx
    exp r1.xy, r1.xyxx
    mad r1.zw, r1.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
    mad r5.yz, r1.zzwz, cb0[5].xxxx, r6.yyzy
    mul r1.xy, r1.xyxx, cb0[5].xxxx
    mul r4.yz, r1.xxyx, r6.yyzy
    mad r0.z, r1.x, l(2.000000), l(-1.000000)
    mad r4.x, r0.z, l(0.050000), r5.x
    movc r6.xyz, r0.wwww, r5.xyzx, r4.xyzx
  endif 
else 
  mov r6.x, r5.x
endif 
if_nz cb0[6].y
  sample_indexable(texture2d)(float,float,float,float) r0.z, r3.yzyy, t12.yzxw, s1
  add r0.w, -r6.x, l(1.000000)
  mad r0.z, -r0.z, cb0[6].w, l(1.000000)
  mad r0.z, -r0.w, r0.z, l(1.000000)
  mov r1.x, r0.z
  mov r1.y, l(0)
  mov r0.w, l(-1)
  loop 
    breakc_z r0.w
    itof r1.z, r1.y
    mad r3.x, -r0.x, r1.z, r3.y
    sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r3.xzxx, t12.yxwz, s1, l(0.000000)
    lt r1.w, l(0.800000), r2.y
    if_nz r1.w
      add r1.w, -r2.z, l(1.000000)
      mul r1.w, r1.w, l(10.000000)
      ge r2.y, r1.w, r1.z
      div r1.z, r1.z, r1.w
      add r1.zw, -r1.zzzx, l(0.000000, 0.000000, 1.000000, 1.000000)
      and r1.z, r1.z, r2.y
      mad r1.z, -r1.z, cb0[6].w, l(1.000000)
      mad r1.x, -r1.w, r1.z, l(1.000000)
    endif 
    iadd r1.y, r1.y, l(1)
    ilt r0.w, r1.y, l(10)
  endloop 
  mov r6.x, r1.x
  lt r0.x, l(0.400000), r0.y
  if_nz r0.x
    div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
    mul r6.yz, r0.xxxx, r6.yyzy
  endif 
endif 
add r0.x, r6.y, r6.x
add r0.x, r6.z, r0.x
mul r0.w, r6.y, l(0.272000)
mad r0.w, r6.x, l(0.956000), -r0.w
mad r0.y, -r6.z, l(1.106000), r0.w
mul r0.w, r6.y, l(0.647400)
mad r0.w, r6.x, l(0.621000), -r0.w
mad r0.z, r6.z, l(1.704600), r0.w
mul r0.w, r2.x, cb0[8].x
movc r0.w, cb0[7].w, r0.w, l(0)
mad r0.w, v1.y, cb0[0].x, r0.w
add r0.w, r0.w, l(0.500000)
mul r0.w, r0.w, l(6.283185)
sincos null, r0.w, r0.w
add r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.500000)
log r0.w, r0.w
mul r0.w, r0.w, cb0[7].z
exp r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
mul r1.xyz, r0.wwww, r0.xyzx
movc r0.xyz, cb0[7].yyyy, r1.xyzx, r0.xyzx
if_nz cb0[1].x
  mul r0.w, cb0[1].w, l(0.000291)
  mul r1.xyz, cb0[2].xyzx, l(0.000694, 0.000291, 0.000694, 0.000000)
  ge r1.w, r0.w, v1.x
  mad r2.x, -cb0[1].w, l(0.000291), l(1.000000)
  ge r2.y, v1.x, r2.x
  or r1.w, r1.w, r2.y
  ge r2.y, r1.x, v1.y
  or r1.w, r1.w, r2.y
  mad r2.y, -cb0[2].x, l(0.000694), l(1.000000)
  ge r2.z, v1.y, r2.y
  or r1.w, r1.w, r2.z
  lt r2.z, r0.w, v1.x
  mad r0.w, cb0[2].y, l(0.000291), r0.w
  lt r2.w, v1.x, r0.w
  and r2.z, r2.w, r2.z
  add r0.w, -r0.w, l(1.000000)
  lt r0.w, r0.w, v1.x
  lt r2.w, v1.x, r2.x
  and r0.w, r0.w, r2.w
  or r0.w, r0.w, r2.z
  lt r2.zw, v1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
  mad r3.x, -cb0[1].w, l(0.000291), v1.x
  div r3.x, r3.x, r1.y
  add r2.x, r2.x, -v1.x
  div r1.y, r2.x, r1.y
  movc r1.y, r2.z, r3.x, r1.y
  mul r3.xyz, r0.xyzx, r1.yyyy
  movc r3.xyz, r0.wwww, r3.xyzx, r0.xyzx
  lt r0.w, r1.x, v1.y
  add r1.x, r1.x, r1.z
  lt r1.y, v1.y, r1.x
  and r0.w, r0.w, r1.y
  add r1.x, -r1.x, l(1.000000)
  lt r1.x, r1.x, v1.y
  lt r1.y, v1.y, r2.y
  and r1.x, r1.y, r1.x
  or r0.w, r0.w, r1.x
  mad r1.x, -cb0[2].x, l(0.000694), v1.y
  add r1.y, r2.y, -v1.y
  div r1.xy, r1.xyxx, r1.zzzz
  movc r1.x, r2.w, r1.x, r1.y
  mul r1.xyz, r1.xxxx, r3.xyzx
  movc r1.xyz, r0.wwww, r1.xyzx, r3.xyzx
  movc r0.xyz, r1.wwww, l(0,0,0,0), r1.xyzx
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 471 instruction slots used
