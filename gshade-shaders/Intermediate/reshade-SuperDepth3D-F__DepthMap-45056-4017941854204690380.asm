//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   bool Cancel_Depth;                 // Offset:    0 Size:     4 [unused]
//   bool Mask_Cycle;                   // Offset:    4 Size:     4 [unused]
//   bool Text_Info;                    // Offset:    8 Size:     4 [unused]
//   bool CLK;                          // Offset:   12 Size:     4 [unused]
//   bool Trigger_Fade_A;               // Offset:   16 Size:     4 [unused]
//   bool Trigger_Fade_B;               // Offset:   20 Size:     4 [unused]
//   float2 Mousecoords;                // Offset:   24 Size:     8 [unused]
//   float frametime;                   // Offset:   32 Size:     4
//   float timer;                       // Offset:   36 Size:     4 [unused]
//   float3 motion[2];                  // Offset:   48 Size:    28 [unused]
//   bool DepthCheck;                   // Offset:   76 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s0                              sampler      NA          NA             s0      1 
// __s3                              sampler      NA          NA             s3      1 
// __V__DepthBufferTex               texture  float4          2d             t0      1 
// __V__BackBufferTex                texture  float4          2d             t2      1 
// __V__texLumN                      texture  float4          2d            t10      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.x, r0.x, l(-58.999996), l(59.999996)
rcp r0.z, r0.x
mov_sat r0.z, r0.z
mul r1.x, r0.z, l(0.400000)
mad r1.y, r0.z, l(-0.800000), l(3.000000)
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.y
lt r1.x, r1.x, r0.z
and r0.y, r1.x, l(0x3f800000)
lt r1.xy, v1.xyxx, l(0.000581, 0.001389, 0.000000, 0.000000)
and r1.y, r1.y, r1.x
if_nz r1.y
  sample_indexable(texture2d)(float,float,float,float) r1.y, l(0.000000, 0.083000, 0.000000, 0.000000), t10.xzyw, s3
  mul r1.z, cb0[2].x, l(-0.002007)
  exp r1.z, r1.z
  add r1.z, -r1.z, l(1.000000)
  mad r0.x, -r1.y, r1.z, r1.y
else 
  mov r0.x, r0.z
endif 
add r1.yz, -v1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
lt r1.yz, r1.yyzy, l(0.000000, 0.000581, 0.001389, 0.000000)
and r1.y, r1.z, r1.y
if_nz r1.y
  sample_indexable(texture2d)(float,float,float,float) r1.y, l(0.000000, 0.250000, 0.000000, 0.000000), t10.xzyw, s3
  mul r1.w, cb0[2].x, l(-0.002885)
  exp r1.w, r1.w
  add r1.w, -r1.w, l(1.000000)
  mad r0.x, -r1.y, r1.w, r1.y
endif 
and r1.x, r1.z, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.x, l(0.000000, 0.416000, 0.000000, 0.000000), t10.zxyw, s3
  mul r1.y, cb0[2].x, l(-0.002885)
  exp r1.y, r1.y
  add r1.y, -r1.y, l(1.000000)
  mad r0.x, -r1.x, r1.y, r1.x
endif 
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t2.xyzw, s3
max r1.y, r1.z, r1.y
max r0.w, r1.y, r1.x
max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xzw, r0.xxzw, l(1.000000, 0.000000, 1.000000, 1.000000)
mov o0.y, r0.y
ret 
// Approximately 46 instruction slots used
