//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer _Globals
// {
//
//   float screenLinesNum;              // Offset:    0 Size:     4 [unused]
//   bool VHS_Bleed;                    // Offset:    4 Size:     4
//   int VHS_BleedMode;                 // Offset:    8 Size:     4
//   float bleedAmount;                 // Offset:   12 Size:     4
//   bool VHS_FishEye;                  // Offset:   16 Size:     4
//   bool VHS_FishEye_Hyperspace;       // Offset:   20 Size:     4
//   float fisheyeBend;                 // Offset:   24 Size:     4
//   float cutoffX;                     // Offset:   28 Size:     4 [unused]
//   float cutoffY;                     // Offset:   32 Size:     4 [unused]
//   float cutoffFadeX;                 // Offset:   36 Size:     4 [unused]
//   float cutoffFadeY;                 // Offset:   40 Size:     4 [unused]
//   bool VHS_Vignette;                 // Offset:   44 Size:     4
//   float vignetteAmount;              // Offset:   48 Size:     4
//   float vignetteSpeed;               // Offset:   52 Size:     4
//   float noiseLinesNum;               // Offset:   56 Size:     4 [unused]
//   float noiseQuantizeX;              // Offset:   60 Size:     4 [unused]
//   bool VHS_FilmGrain;                // Offset:   64 Size:     4 [unused]
//   float filmGrainAmount;             // Offset:   68 Size:     4 [unused]
//   bool VHS_YIQNoise;                 // Offset:   72 Size:     4 [unused]
//   int signalNoiseType;               // Offset:   76 Size:     4 [unused]
//   float signalNoiseAmount;           // Offset:   80 Size:     4 [unused]
//   float signalNoisePower;            // Offset:   84 Size:     4 [unused]
//   bool VHS_LineNoise;                // Offset:   88 Size:     4 [unused]
//   float lineNoiseAmount;             // Offset:   92 Size:     4 [unused]
//   float lineNoiseSpeed;              // Offset:   96 Size:     4 [unused]
//   bool VHS_TapeNoise;                // Offset:  100 Size:     4 [unused]
//   float tapeNoiseTH;                 // Offset:  104 Size:     4 [unused]
//   float tapeNoiseAmount;             // Offset:  108 Size:     4 [unused]
//   float tapeNoiseSpeed;              // Offset:  112 Size:     4 [unused]
//   bool VHS_ScanLines;                // Offset:  116 Size:     4 [unused]
//   float scanLineWidth;               // Offset:  120 Size:     4 [unused]
//   bool VHS_LinesFloat;               // Offset:  124 Size:     4 [unused]
//   float linesFloatSpeed;             // Offset:  128 Size:     4 [unused]
//   bool VHS_Stretch;                  // Offset:  132 Size:     4 [unused]
//   bool VHS_Jitter_H;                 // Offset:  136 Size:     4 [unused]
//   float jitterHAmount;               // Offset:  140 Size:     4 [unused]
//   bool VHS_Jitter_V;                 // Offset:  144 Size:     4 [unused]
//   float jitterVAmount;               // Offset:  148 Size:     4 [unused]
//   float jitterVSpeed;                // Offset:  152 Size:     4 [unused]
//   bool VHS_Twitch_H;                 // Offset:  156 Size:     4 [unused]
//   float twitchHFreq;                 // Offset:  160 Size:     4 [unused]
//   bool VHS_Twitch_V;                 // Offset:  164 Size:     4 [unused]
//   float twitchVFreq;                 // Offset:  168 Size:     4 [unused]
//   bool VHS_SignalTweak;              // Offset:  172 Size:     4
//   float signalAdjustY;               // Offset:  176 Size:     4
//   float signalAdjustI;               // Offset:  180 Size:     4
//   float signalAdjustQ;               // Offset:  184 Size:     4
//   float signalShiftY;                // Offset:  188 Size:     4
//   float signalShiftI;                // Offset:  192 Size:     4
//   float signalShiftQ;                // Offset:  196 Size:     4
//   float gammaCorection;              // Offset:  200 Size:     4
//   bool VHS_Feedback;                 // Offset:  204 Size:     4 [unused]
//   float feedbackAmount;              // Offset:  208 Size:     4 [unused]
//   float feedbackFade;                // Offset:  212 Size:     4 [unused]
//   float feedbackThresh;              // Offset:  216 Size:     4 [unused]
//   float3 feedbackColor;              // Offset:  224 Size:    12 [unused]
//   bool feedbackDebug;                // Offset:  236 Size:     4 [unused]
//   int VHS_Filter;                    // Offset:  240 Size:     4 [unused]
//   float Timer;                       // Offset:  244 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// __s1                              sampler      NA          NA             s1      1 
// __V__ReShade__BackBufferTex       texture  float4          2d             t0      1 
// _Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
dcl_indexableTemp x0[33], 4
dcl_indexableTemp x1[33], 4
mul r0.x, cb0[3].y, cb0[15].y
if_nz cb0[1].x
  add r0.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
  mul r1.xy, r0.yzyy, r0.yzyy
  mul r0.w, r1.x, cb0[1].z
  mad r0.w, r1.y, r0.w, l(0.833333)
  mul r0.w, r0.w, l(1.200000)
  mad r0.yz, r0.yyzy, r0.wwww, l(0.000000, 0.500000, 0.500000, 0.000000)
  movc r1.xy, cb0[1].yyyy, v1.xyxx, r0.yzyy
  if_nz cb0[1].y
    mul r0.yz, r1.yyxy, l(0.000000, 0.418605, 1.000000, 0.000000)
    mad r2.xy, r1.xyxx, l(1.000000, 0.418605, 0.000000, 0.000000), l(-0.500000, -0.209302, 0.000000, 0.000000)
    dp2 r0.w, r2.xyxx, r2.xyxx
    sqrt r1.w, r0.w
    mad r2.z, cb0[1].z, l(0.020000), l(-0.500000)
    mul r2.w, r2.z, l(5.795866)
    lt r3.x, l(0.000000), r2.z
    movc r3.y, r3.x, l(0.542040), l(0.500000)
    if_nz r3.x
      rsq r3.x, r0.w
      mul r3.xz, r2.xxyx, r3.xxxx
      mul r3.w, r1.w, r2.w
      sincos r4.x, r5.x, r3.w
      div r3.w, r4.x, r5.x
      mul r3.xz, r3.wwww, r3.xxzx
      mul r3.xz, r3.yyyy, r3.xxzx
      mul r3.w, r2.w, r3.y
      sincos r4.x, r5.x, r3.w
      div r3.w, r4.x, r5.x
      div r3.xz, r3.xxzx, r3.wwww
      add r0.yz, r3.zzxz, l(0.000000, 0.209302, 0.500000, 0.000000)
      mov r1.x, r0.z
    else 
      lt r2.z, r2.z, l(0.000000)
      if_nz r2.z
        rsq r0.w, r0.w
        mul r2.xy, r0.wwww, r2.xyxx
        mul r0.w, r1.w, -r2.w
        mul r0.w, r0.w, l(10.000000)
        min r1.w, |r0.w|, l(1.000000)
        max r2.z, |r0.w|, l(1.000000)
        div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
        mul r1.w, r1.w, r2.z
        mul r2.z, r1.w, r1.w
        mad r3.x, r2.z, l(0.020835), l(-0.085133)
        mad r3.x, r2.z, r3.x, l(0.180141)
        mad r3.x, r2.z, r3.x, l(-0.330299)
        mad r2.z, r2.z, r3.x, l(0.999866)
        mul r3.x, r1.w, r2.z
        lt r3.z, l(1.000000), |r0.w|
        mad r3.x, r3.x, l(-2.000000), l(1.570796)
        and r3.x, r3.z, r3.x
        mad r1.w, r1.w, r2.z, r3.x
        min r0.w, r0.w, l(1.000000)
        lt r0.w, r0.w, -r0.w
        movc r0.w, r0.w, -r1.w, r1.w
        mul r2.xy, r0.wwww, r2.xyxx
        mul r2.xy, r3.yyyy, r2.xyxx
        mul r0.w, -r2.w, r3.y
        mul r0.w, r0.w, l(10.000000)
        min r1.w, |r0.w|, l(1.000000)
        max r2.z, |r0.w|, l(1.000000)
        div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
        mul r1.w, r1.w, r2.z
        mul r2.z, r1.w, r1.w
        mad r2.w, r2.z, l(0.020835), l(-0.085133)
        mad r2.w, r2.z, r2.w, l(0.180141)
        mad r2.w, r2.z, r2.w, l(-0.330299)
        mad r2.z, r2.z, r2.w, l(0.999866)
        mul r2.w, r1.w, r2.z
        lt r3.x, l(1.000000), |r0.w|
        mad r2.w, r2.w, l(-2.000000), l(1.570796)
        and r2.w, r3.x, r2.w
        mad r1.w, r1.w, r2.z, r2.w
        min r0.w, r0.w, l(1.000000)
        lt r0.w, r0.w, -r0.w
        movc r0.w, r0.w, -r1.w, r1.w
        div r2.xy, r2.xyxx, r0.wwww
        add r0.yz, r2.yyxy, l(0.000000, 0.209302, 0.500000, 0.000000)
        mov r1.x, r0.z
      else 
        mov r1.x, r0.z
      endif 
    endif 
    mul r1.y, r0.y, l(2.388889)
  endif 
else 
  mov r1.xy, v1.xyxx
endif 
ieq r2.xyzw, cb0[0].zzzz, l(0, 1, 3, 2)
ieq r0.y, cb0[0].z, l(4)
mov x0[0].x, l(0)
mov x0[1].x, l(0)
mov x0[2].x, l(0)
mov x0[3].x, l(0)
mov x0[4].x, l(0)
mov x0[5].x, l(0)
mov x0[6].x, l(0)
mov x0[7].x, l(0)
mov x0[8].x, l(0)
mov x0[9].x, l(0)
mov x0[10].x, l(0)
mov x0[11].x, l(0)
mov x0[12].x, l(0)
mov x0[13].x, l(0)
mov x0[14].x, l(0)
mov x0[15].x, l(0)
mov x0[16].x, l(0)
mov x0[17].x, l(0)
mov x0[18].x, l(0)
mov x0[19].x, l(0)
mov x0[20].x, l(0)
mov x0[21].x, l(0)
mov x0[22].x, l(0)
mov x0[23].x, l(0)
mov x0[24].x, l(0)
mov x0[25].x, l(0)
mov x0[26].x, l(0)
mov x0[27].x, l(0)
mov x0[28].x, l(0)
mov x0[29].x, l(0)
mov x0[30].x, l(0)
mov x0[31].x, l(0)
mov x0[32].x, l(0)
mov x1[0].x, l(0)
mov x1[1].x, l(0)
mov x1[2].x, l(0)
mov x1[3].x, l(0)
mov x1[4].x, l(0)
mov x1[5].x, l(0)
mov x1[6].x, l(0)
mov x1[7].x, l(0)
mov x1[8].x, l(0)
mov x1[9].x, l(0)
mov x1[10].x, l(0)
mov x1[11].x, l(0)
mov x1[12].x, l(0)
mov x1[13].x, l(0)
mov x1[14].x, l(0)
mov x1[15].x, l(0)
mov x1[16].x, l(0)
mov x1[17].x, l(0)
mov x1[18].x, l(0)
mov x1[19].x, l(0)
mov x1[20].x, l(0)
mov x1[21].x, l(0)
mov x1[22].x, l(0)
mov x1[23].x, l(0)
mov x1[24].x, l(0)
mov x1[25].x, l(0)
mov x1[26].x, l(0)
mov x1[27].x, l(0)
mov x1[28].x, l(0)
mov x1[29].x, l(0)
mov x1[30].x, l(0)
mov x1[31].x, l(0)
mov x1[32].x, l(0)
or r0.z, r2.z, r2.x
if_nz r0.z
  mov x0[0].x, l(-0.000012)
  mov x0[1].x, l(-0.000022)
  mov x0[2].x, l(-0.000013)
  mov x0[3].x, l(-0.000012)
  mov x0[4].x, l(-0.000050)
  mov x0[5].x, l(-0.000114)
  mov x0[6].x, l(-0.000122)
  mov x0[7].x, l(-0.000006)
  mov x0[8].x, l(0.000171)
  mov x0[9].x, l(0.000237)
  mov x0[10].x, l(0.000170)
  mov x0[11].x, l(0.000286)
  mov x0[12].x, l(0.000985)
  mov x0[13].x, l(0.002019)
  mov x0[14].x, l(0.002002)
  mov x0[15].x, l(-0.000910)
  mov x0[16].x, l(-0.007049)
  mov x0[17].x, l(-0.013223)
  mov x0[18].x, l(-0.012607)
  mov x0[19].x, l(0.002461)
  mov x0[20].x, l(0.035868)
  mov x0[21].x, l(0.084016)
  mov x0[22].x, l(0.135564)
  mov x0[23].x, l(0.175261)
  mov x0[24].x, l(0.190177)
  mov x1[0].x, l(-0.000119)
  mov x1[1].x, l(-0.000271)
  mov x1[2].x, l(-0.000503)
  mov x1[3].x, l(-0.000931)
  mov x1[4].x, l(-0.001451)
  mov x1[5].x, l(-0.002065)
  mov x1[6].x, l(-0.002700)
  mov x1[7].x, l(-0.003241)
  mov x1[8].x, l(-0.003525)
  mov x1[9].x, l(-0.003350)
  mov x1[10].x, l(-0.002492)
  mov x1[11].x, l(-0.000721)
  mov x1[12].x, l(0.002165)
  mov x1[13].x, l(0.006314)
  mov x1[14].x, l(0.011789)
  mov x1[15].x, l(0.018546)
  mov x1[16].x, l(0.026414)
  mov x1[17].x, l(0.035101)
  mov x1[18].x, l(0.044197)
  mov x1[19].x, l(0.053207)
  mov x1[20].x, l(0.061590)
  mov x1[21].x, l(0.068804)
  mov x1[22].x, l(0.074356)
  mov x1[23].x, l(0.077857)
  mov x1[24].x, l(0.079052)
else 
  if_nz r2.y
    mov x0[0].x, l(-0.000071)
    mov x0[1].x, l(-0.000033)
    mov x0[2].x, l(0.000129)
    mov x0[3].x, l(0.000135)
    mov x0[4].x, l(-0.000227)
    mov x0[5].x, l(-0.000778)
    mov x0[6].x, l(-0.000998)
    mov x0[7].x, l(-0.000523)
    mov x0[8].x, l(0.000345)
    mov x0[9].x, l(0.000769)
    mov x0[10].x, l(0.000276)
    mov x0[11].x, l(-0.000373)
    mov x0[12].x, l(0.000523)
    mov x0[13].x, l(0.003814)
    mov x0[14].x, l(0.007503)
    mov x0[15].x, l(0.006786)
    mov x0[16].x, l(-0.002637)
    mov x0[17].x, l(-0.019461)
    mov x0[18].x, l(-0.033792)
    mov x0[19].x, l(-0.029922)
    mov x0[20].x, l(0.005033)
    mov x0[21].x, l(0.071226)
    mov x0[22].x, l(0.151756)
    mov x0[23].x, l(0.218166)
    mov x0[24].x, l(0.243902)
    mov x1[0].x, l(0.001846)
    mov x1[1].x, l(0.002382)
    mov x1[2].x, l(0.003040)
    mov x1[3].x, l(0.003839)
    mov x1[4].x, l(0.004795)
    mov x1[5].x, l(0.005925)
    mov x1[6].x, l(0.007243)
    mov x1[7].x, l(0.008757)
    mov x1[8].x, l(0.010474)
    mov x1[9].x, l(0.012392)
    mov x1[10].x, l(0.014504)
    mov x1[11].x, l(0.016792)
    mov x1[12].x, l(0.019231)
    mov x1[13].x, l(0.021787)
    mov x1[14].x, l(0.024416)
    mov x1[15].x, l(0.027067)
    mov x1[16].x, l(0.029683)
    mov x1[17].x, l(0.032199)
    mov x1[18].x, l(0.034552)
    mov x1[19].x, l(0.036677)
    mov x1[20].x, l(0.038512)
    mov x1[21].x, l(0.040003)
    mov x1[22].x, l(0.041103)
    mov x1[23].x, l(0.041778)
    mov x1[24].x, l(0.042005)
  else 
    if_nz r2.w
      mov x0[0].x, l(-0.000206)
      mov x0[1].x, l(-0.000149)
      mov x0[2].x, l(-0.000052)
      mov x0[4].x, l(-0.000066)
      mov x0[5].x, l(-0.000245)
      mov x0[6].x, l(-0.000433)
      mov x0[7].x, l(-0.000473)
      mov x0[8].x, l(-0.000252)
      mov x0[9].x, l(0.000199)
      mov x0[10].x, l(0.000687)
      mov x0[11].x, l(0.000944)
      mov x0[12].x, l(0.000803)
      mov x0[13].x, l(0.000363)
      mov x0[14].x, l(0.000013)
      mov x0[15].x, l(0.000253)
      mov x0[16].x, l(0.001339)
      mov x0[17].x, l(0.002933)
      mov x0[18].x, l(0.003983)
      mov x0[19].x, l(0.003027)
      mov x0[20].x, l(-0.001102)
      mov x0[21].x, l(-0.008373)
      mov x0[22].x, l(-0.016898)
      mov x0[23].x, l(-0.022914)
      mov x0[24].x, l(-0.021642)
      mov x0[25].x, l(-0.008863)
      mov x0[26].x, l(0.017272)
      mov x0[27].x, l(0.054922)
      mov x0[28].x, l(0.098343)
      mov x0[29].x, l(0.139044)
      mov x0[30].x, l(0.168056)
      mov x0[31].x, l(0.178571)
      mov x1[0].x, l(0.001385)
      mov x1[1].x, l(0.001678)
      mov x1[2].x, l(0.002022)
      mov x1[3].x, l(0.002421)
      mov x1[4].x, l(0.002880)
      mov x1[5].x, l(0.003407)
      mov x1[6].x, l(0.004005)
      mov x1[7].x, l(0.004679)
      mov x1[8].x, l(0.005434)
      mov x1[9].x, l(0.006272)
      mov x1[10].x, l(0.007196)
      mov x1[11].x, l(0.008205)
      mov x1[12].x, l(0.009298)
      mov x1[13].x, l(0.010473)
      mov x1[14].x, l(0.011725)
      mov x1[15].x, l(0.013047)
      mov x1[16].x, l(0.014430)
      mov x1[17].x, l(0.015861)
      mov x1[18].x, l(0.017329)
      mov x1[19].x, l(0.018817)
      mov x1[20].x, l(0.020309)
      mov x1[21].x, l(0.021786)
      mov x1[22].x, l(0.023228)
      mov x1[23].x, l(0.024614)
      mov x1[24].x, l(0.025925)
      mov x1[25].x, l(0.027140)
      mov x1[26].x, l(0.028238)
      mov x1[27].x, l(0.029202)
      mov x1[28].x, l(0.030015)
      mov x1[29].x, l(0.030663)
      mov x1[30].x, l(0.031135)
      mov x1[31].x, l(0.031421)
      mov x1[32].x, l(0.031517)
    else 
      if_nz r0.y
        mov x0[0].x, l(-0.000175)
        mov x0[1].x, l(-0.000206)
        mov x0[2].x, l(-0.000149)
        mov x0[3].x, l(-0.000052)
        mov x0[5].x, l(-0.000066)
        mov x0[6].x, l(-0.000245)
        mov x0[7].x, l(-0.000433)
        mov x0[8].x, l(-0.000473)
        mov x0[9].x, l(-0.000252)
        mov x0[10].x, l(0.000199)
        mov x0[11].x, l(0.000687)
        mov x0[12].x, l(0.000944)
        mov x0[13].x, l(0.000803)
        mov x0[14].x, l(0.000363)
        mov x0[15].x, l(0.000013)
        mov x0[16].x, l(0.000253)
        mov x0[17].x, l(0.001339)
        mov x0[18].x, l(0.002933)
        mov x0[19].x, l(0.003983)
        mov x0[20].x, l(0.003027)
        mov x0[21].x, l(-0.001102)
        mov x0[22].x, l(-0.008373)
        mov x0[23].x, l(-0.016898)
        mov x0[24].x, l(-0.022914)
        mov x0[25].x, l(-0.021642)
        mov x0[26].x, l(-0.008863)
        mov x0[27].x, l(0.017272)
        mov x0[28].x, l(0.054922)
        mov x0[29].x, l(0.098343)
        mov x0[30].x, l(0.139044)
        mov x0[31].x, l(0.168056)
        mov x0[32].x, l(0.178571)
        mov x1[0].x, l(0.001385)
        mov x1[1].x, l(0.001678)
        mov x1[2].x, l(0.002022)
        mov x1[3].x, l(0.002421)
        mov x1[4].x, l(0.002880)
        mov x1[5].x, l(0.003407)
        mov x1[6].x, l(0.004005)
        mov x1[7].x, l(0.004679)
        mov x1[8].x, l(0.005434)
        mov x1[9].x, l(0.006272)
        mov x1[10].x, l(0.007196)
        mov x1[11].x, l(0.008205)
        mov x1[12].x, l(0.009298)
        mov x1[13].x, l(0.010473)
        mov x1[14].x, l(0.011725)
        mov x1[15].x, l(0.013047)
        mov x1[16].x, l(0.014430)
        mov x1[17].x, l(0.015861)
        mov x1[18].x, l(0.017329)
        mov x1[19].x, l(0.018817)
        mov x1[20].x, l(0.020309)
        mov x1[21].x, l(0.021786)
        mov x1[22].x, l(0.023228)
        mov x1[23].x, l(0.024614)
        mov x1[24].x, l(0.025925)
        mov x1[25].x, l(0.027140)
        mov x1[26].x, l(0.028238)
        mov x1[27].x, l(0.029202)
        mov x1[28].x, l(0.030015)
        mov x1[29].x, l(0.030663)
        mov x1[30].x, l(0.031135)
        mov x1[31].x, l(0.031421)
        mov x1[32].x, l(0.031517)
      endif 
    endif 
  endif 
endif 
if_nz cb0[0].y
  mul r0.z, cb0[0].w, l(0.000291)
  or r0.w, r2.y, r2.x
  or r0.w, r2.z, r0.w
  or r0.y, r0.y, r2.w
  movc r0.w, r0.w, l(21), l(17)
  movc r0.y, r0.y, l(28), r0.w
  add r2.xy, r1.xyxx, l(-0.000145, -0.000000, 0.000000, 0.000000)
  itof r0.w, r0.y
  mul r1.w, r0.w, l(0.000978)
  frc r1.w, r1.w
  mul r1.w, r1.w, l(1023.000000)
  add r1.z, r1.x, l(-0.000145)
  mov r3.y, l(0)
  mov r4.xyz, l(0,0,0,0)
  mov r5.xyz, l(0,0,0,0)
  mov r2.zw, l(0,0,0,-1)
  loop 
    breakc_z r2.w
    itof r3.z, r2.z
    add r3.z, -r0.w, r3.z
    mul r3.x, r0.z, r3.z
    add r3.xz, r1.zzyz, r3.xxyx
    sample_l_indexable(texture2d)(float,float,float,float) r3.xzw, r3.xzxx, t0.xwyz, s1, l(0.000000)
    dp3 r6.x, r3.xzwx, l(0.298900, 0.595900, 0.211500, 0.000000)
    mul r4.w, r3.z, l(0.274400)
    mad r4.w, r3.x, l(0.587000), -r4.w
    mad r6.y, -r3.w, l(0.522900), r4.w
    mul r3.z, r3.z, l(0.321600)
    mad r3.x, r3.x, l(0.114000), -r3.z
    mad r6.z, r3.w, l(0.311400), r3.x
    iadd r3.xz, r2.zzzz, l(3, 0, 1, 0)
    mov r7.x, x0[r3.x + 0].x
    mov r7.y, x1[r2.z + 0].x
    mad r4.xyz, r6.xyzx, r7.xyyx, r4.xyzx
    add r5.xyz, r5.xyzx, r7.xyyx
    itof r3.x, r3.z
    lt r2.w, r3.x, r1.w
    mov r2.z, r3.z
  endloop 
  mov r3.x, x0[r0.y + 0].x
  mov r3.y, x1[r0.y + 0].x
  sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, r2.xyxx, t0.wxyz, s1, l(0.000000)
  dp3 r2.x, r0.yzwy, l(0.298900, 0.595900, 0.211500, 0.000000)
  mul r1.z, r0.z, l(0.274400)
  mad r1.z, r0.y, l(0.587000), -r1.z
  mad r2.y, -r0.w, l(0.522900), r1.z
  mul r0.z, r0.z, l(0.321600)
  mad r0.y, r0.y, l(0.114000), -r0.z
  mad r2.z, r0.w, l(0.311400), r0.y
  mad r0.yzw, r2.xxyz, r3.xxyy, r4.xxyz
  add r2.xyz, r3.xyyx, r5.xyzx
  div r0.yzw, r0.yyzw, r2.xxyz
else 
  sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t0.xyzw, s1, l(0.000000)
  dp3 r0.y, r2.xyzx, l(0.298900, 0.595900, 0.211500, 0.000000)
  mul r1.z, r2.y, l(0.274400)
  mad r1.z, r2.x, l(0.587000), -r1.z
  mad r0.z, -r2.z, l(0.522900), r1.z
  mul r1.z, r2.y, l(0.321600)
  mad r1.z, r2.x, l(0.114000), -r1.z
  mad r0.w, r2.z, l(0.311400), r1.z
endif 
add r2.xyz, r0.yzwy, cb0[11].xyzx
mul r3.xw, r2.xxxx, cb0[11].wwww
mul r3.yz, r2.yyzy, cb0[12].xxyx
movc r2.xyzw, cb0[10].wwww, r3.xyzw, r0.yzwy
add r0.y, r2.y, r2.w
add r3.x, r2.z, r0.y
mul r0.y, r2.y, l(0.272000)
mad r0.y, r2.x, l(0.956000), -r0.y
mad r3.y, -r2.z, l(1.106000), r0.y
mul r0.y, r2.y, l(0.647400)
mad r0.y, r2.w, l(0.621000), -r0.y
mad r3.z, r2.z, l(1.704600), r0.y
ne r0.y, cb0[12].z, l(1.000000)
log r2.xyz, |r3.xyzx|
mul r2.xyz, r2.xyzx, cb0[12].zzzz
exp r2.xyz, r2.xyzx
movc r0.yzw, r0.yyyy, r2.xxyz, r3.xxyz
movc r0.yzw, cb0[10].wwww, r0.yyzw, r3.xxyz
mul r1.zw, r0.xxxx, l(0.000000, 0.000000, 0.001000, 0.005000)
sincos null, r0.x, r1.w
mad r0.x, r0.x, l(5.000000), r1.z
sincos r0.x, null, r0.x
mad r0.x, r0.x, l(0.100000), l(2.500000)
add r1.xy, r1.yxyy, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.xy, r1.xyxx, r1.xyxx
mad r1.xy, -r1.xyxx, r0.xxxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.x, r1.y, r1.x
log r0.x, |r0.x|
mul r0.x, r0.x, cb0[3].x
exp r0.x, r0.x
mul r1.xyz, r0.xxxx, r0.yzwy
movc o0.xyz, cb0[2].wwww, r1.xyzx, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 495 instruction slots used
